[
  {
    "name": "AuthenticationController.java",
    "path": "service/src/main/java/com/myhome/controllers/AuthenticationController.java",
    "content": {
      "structured": {
        "description": "An `AuthenticationController` class that acts as a RESTful API for authentication purposes. The controller receives a `LoginRequest` object from the client and passes it to an `AuthenticationService` implementation for processing. Once the authentication is successful, the controller creates and returns a `ResponseEntity` object with the user ID and JWT token in the HTTP headers.",
        "items": [
          {
            "id": "67b31248-bfd1-d99c-3341-ecaa02e883c7",
            "ancestors": [],
            "type": "function",
            "description": "Is a Spring REST controller that implements the AuthenticationApi interface. It provides a login method that takes a valid LoginRequest object as input and returns a ResponseEntity with the user ID and JWT token in the HTTP headers. The class also includes a private method for creating the HTTP headers based on the returned AuthenticationData object.",
            "name": "AuthenticationController",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 21,
            "docLength": null
          },
          {
            "id": "5620b936-01c1-8896-c845-4de7296520b1",
            "ancestors": [
              "67b31248-bfd1-d99c-3341-ecaa02e883c7"
            ],
            "type": "function",
            "description": "Authenticates a user by calling the `loginService` and returning an `ResponseEntity` with the authentication data.",
            "params": [
              {
                "name": "loginRequest",
                "type_name": "LoginRequest",
                "description": "user's login details, containing the username and password for authentication by the `authenticationService`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an `OK` status and headers containing authentication data.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testLogin() {\n    LoginRequest request = new LoginRequest(\"example@gmail.com\", \"password\");\n    ResponseEntity<Void> response = authenticationController.login(request);\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n}\n",
              "description": ""
            },
            "name": "login",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "e6898b37-54cd-c09b-8141-f29d241a8dd6",
            "ancestors": [
              "67b31248-bfd1-d99c-3341-ecaa02e883c7"
            ],
            "type": "function",
            "description": "Creates HTTP headers with user ID and JWT token for login purposes based on input `AuthenticationData`.",
            "params": [
              {
                "name": "authenticationData",
                "type_name": "AuthenticationData",
                "description": "user's login information, providing the user ID and JWT token for authentication purposes.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "HttpHeaders",
              "description": "a set of HTTP headers containing the user ID and JWT token for authentication purposes.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public void exampleMethod() {\n    final AuthenticationData authenticationData = new AuthenticationData(\"userId\", \"jwtToken\");\n    HttpHeaders headers = createLoginHeaders(authenticationData);\n}\n",
              "description": ""
            },
            "name": "createLoginHeaders",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AmenityControllerTest.java",
    "path": "service/src/test/java/com/myhome/controllers/AmenityControllerTest.java",
    "content": {
      "structured": {
        "description": "Unit tests for an AmenityController class, which interacts with AmenityService and AmenityApiMapper classes to perform CRUD operations on amenities in a community. The controller handles requests to add, get details, update, or delete amenities, using these service and mapper classes to interact with the database and transform data between Java objects and HTTP responses.",
        "diagram": {
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    subgraph cluster_1 {\n        label=\"api\"\n        color=\"#33363A\"\n        assertNull [label=\"org.junit.jupiter.api.Assertions.assertNull\", style=\"rounded,filled\"]\n        assertEquals [label=\"org.junit.jupiter.api.Assertions.assertEquals\", style=\"rounded,filled\"]\n    }\n    never [label=\"org.mockito.Mockito.never\", style=\"rounded,filled\"]\n    Mock [label=\"org.mockito.Mock\", style=\"rounded,filled\"]\n    Amenity []\n    verify [label=\"org.mockito.Mockito.verify\", style=\"rounded,filled\"]\n    HttpStatus [label=\"org.springframework.http.HttpStatus\", style=\"rounded,filled\"]\n    singletonList [label=\"java.util.Collections.singletonList\", style=\"rounded,filled\"]\n    AmenityApiMapper []\n    Test [label=\"org.junit.jupiter.api.Test\", style=\"rounded,filled\"]\n    UpdateAmenityRequest [label=\"com.myhome.model.UpdateAmenityRequest\", style=\"rounded,filled\"]\n    MockitoAnnotations [label=\"org.mockito.MockitoAnnotations\", style=\"rounded,filled\"]\n    HashSet [label=\"java.util.HashSet\", style=\"rounded,filled\"]\n    Optional [label=\"java.util.Optional\", style=\"rounded,filled\"]\n    ResponseEntity [label=\"org.springframework.http.ResponseEntity\", style=\"rounded,filled\"]\n    given [label=\"org.mockito.BDDMockito.given\", style=\"rounded,filled\"]\n    BeforeEach [label=\"org.junit.jupiter.api.BeforeEach\", style=\"rounded,filled\"]\n    AmenityService []\n    AddAmenityRequest [label=\"com.myhome.model.AddAmenityRequest\", style=\"rounded,filled\"]\n    any [label=\"org.mockito.ArgumentMatchers.any\", style=\"rounded,filled\"]\n    AddAmenityResponse [label=\"com.myhome.model.AddAmenityResponse\", style=\"rounded,filled\"]\n    AmenityDto []\n    subgraph cluster_main {\n        // style=filled\n        color=\"#00000000\"\n        AmenityControllerTest [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n        label = \"\"\n    }\n    GetAmenityDetailsResponse [label=\"com.myhome.model.GetAmenityDetailsResponse\", style=\"rounded,filled\"]\n    BigDecimal [label=\"java.math.BigDecimal\", style=\"rounded,filled\"]\n    InjectMocks [label=\"org.mockito.InjectMocks\", style=\"rounded,filled\"]\n    AmenityControllerTest -> Amenity [penwidth=1]\n    AmenityControllerTest -> AmenityService [style=\"dashed\"]\n    AmenityControllerTest -> InjectMocks [style=\"dashed\"]\n    AmenityControllerTest -> HttpStatus [style=\"dashed\"]\n    AmenityControllerTest -> AddAmenityRequest [style=\"dashed\"]\n    AmenityControllerTest -> AmenityDto [style=\"dashed\"]\n    AmenityControllerTest -> assertNull [style=\"dashed\"]\n    AmenityControllerTest -> BigDecimal [style=\"dashed\"]\n    AmenityControllerTest -> Mock [style=\"dashed\"]\n    AmenityControllerTest -> assertEquals [style=\"dashed\"]\n    AmenityControllerTest -> AddAmenityResponse [style=\"dashed\"]\n    AmenityControllerTest -> AmenityDto [penwidth=1]\n    AmenityControllerTest -> GetAmenityDetailsResponse [style=\"dashed\"]\n    AmenityControllerTest -> Test [style=\"dashed\"]\n    AmenityControllerTest -> HashSet [style=\"dashed\"]\n    AmenityControllerTest -> MockitoAnnotations [style=\"dashed\"]\n    AmenityControllerTest -> any [style=\"dashed\"]\n    AmenityControllerTest -> given [style=\"dashed\"]\n    AmenityControllerTest -> never [style=\"dashed\"]\n    AmenityControllerTest -> Amenity [style=\"dashed\"]\n    AmenityControllerTest -> ResponseEntity [style=\"dashed\"]\n    AmenityControllerTest -> verify [style=\"dashed\"]\n    AmenityControllerTest -> singletonList [style=\"dashed\"]\n    AmenityControllerTest -> Optional [style=\"dashed\"]\n    AmenityControllerTest -> UpdateAmenityRequest [penwidth=1]\n    AmenityControllerTest -> BeforeEach [style=\"dashed\"]\n    AmenityControllerTest -> UpdateAmenityRequest [style=\"dashed\"]\n    AmenityControllerTest -> AmenityApiMapper [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 4052 4286\"><svg id=\"d2-svg\" class=\"d2-3855246913\" width=\"4052\" height=\"4286\" viewBox=\"11 11 4052 4286\"><rect x=\"11.000000\" y=\"11.000000\" width=\"4052.000000\" height=\"4286.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-3855246913 .text {\n\tfont-family: \"d2-3855246913-font-regular\";\n}\n@font-face {\n\tfont-family: d2-3855246913-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3855246913 .text-italic {\n\tfont-family: \"d2-3855246913-font-italic\";\n}\n@font-face {\n\tfont-family: d2-3855246913-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3855246913 .text-mono {\n\tfont-family: \"d2-3855246913-font-mono\";\n}\n@font-face {\n\tfont-family: d2-3855246913-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3855246913 .text-mono-bold {\n\tfont-family: \"d2-3855246913-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-3855246913-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-3855246913 .fill-N1{fill:#ECEDED;}\n\t\t.d2-3855246913 .fill-N2{fill:#676C7E;}\n\t\t.d2-3855246913 .fill-N3{fill:#9499AB;}\n\t\t.d2-3855246913 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-3855246913 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-3855246913 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-3855246913 .fill-N7{fill:#151719;}\n\t\t.d2-3855246913 .fill-B1{fill:#717D86;}\n\t\t.d2-3855246913 .fill-B2{fill:#717D86;}\n\t\t.d2-3855246913 .fill-B3{fill:#ffff00;}\n\t\t.d2-3855246913 .fill-B4{fill:#151719;}\n\t\t.d2-3855246913 .fill-B5{fill:#151719;}\n\t\t.d2-3855246913 .fill-B6{fill:#151719;}\n\t\t.d2-3855246913 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-3855246913 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-3855246913 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-3855246913 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-3855246913 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-3855246913 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-3855246913 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-3855246913 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-3855246913 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-3855246913 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-3855246913 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-3855246913 .stroke-N7{stroke:#151719;}\n\t\t.d2-3855246913 .stroke-B1{stroke:#717D86;}\n\t\t.d2-3855246913 .stroke-B2{stroke:#717D86;}\n\t\t.d2-3855246913 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-3855246913 .stroke-B4{stroke:#151719;}\n\t\t.d2-3855246913 .stroke-B5{stroke:#151719;}\n\t\t.d2-3855246913 .stroke-B6{stroke:#151719;}\n\t\t.d2-3855246913 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-3855246913 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-3855246913 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-3855246913 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-3855246913 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-3855246913 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-3855246913 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-3855246913 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-3855246913 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-3855246913 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-3855246913 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-3855246913 .background-color-N7{background-color:#151719;}\n\t\t.d2-3855246913 .background-color-B1{background-color:#717D86;}\n\t\t.d2-3855246913 .background-color-B2{background-color:#717D86;}\n\t\t.d2-3855246913 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-3855246913 .background-color-B4{background-color:#151719;}\n\t\t.d2-3855246913 .background-color-B5{background-color:#151719;}\n\t\t.d2-3855246913 .background-color-B6{background-color:#151719;}\n\t\t.d2-3855246913 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-3855246913 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-3855246913 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-3855246913 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-3855246913 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-3855246913 .color-N1{color:#ECEDED;}\n\t\t.d2-3855246913 .color-N2{color:#676C7E;}\n\t\t.d2-3855246913 .color-N3{color:#9499AB;}\n\t\t.d2-3855246913 .color-N4{color:#CFD2DD;}\n\t\t.d2-3855246913 .color-N5{color:#DEE1EB;}\n\t\t.d2-3855246913 .color-N6{color:#EEF1F8;}\n\t\t.d2-3855246913 .color-N7{color:#151719;}\n\t\t.d2-3855246913 .color-B1{color:#717D86;}\n\t\t.d2-3855246913 .color-B2{color:#717D86;}\n\t\t.d2-3855246913 .color-B3{color:#ffff00;}\n\t\t.d2-3855246913 .color-B4{color:#151719;}\n\t\t.d2-3855246913 .color-B5{color:#151719;}\n\t\t.d2-3855246913 .color-B6{color:#151719;}\n\t\t.d2-3855246913 .color-AA2{color:#ECEDED;}\n\t\t.d2-3855246913 .color-AA4{color:#CFD2DD;}\n\t\t.d2-3855246913 .color-AA5{color:#DEE1EB;}\n\t\t.d2-3855246913 .color-AB4{color:#CFD2DD;}\n\t\t.d2-3855246913 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"1443.000000\" y=\"12.000000\" width=\"2263.000000\" height=\"3158.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"2574.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"java\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"3710.000000\" width=\"1003.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"513.500000\" y=\"3743.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">java</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"1035.000000\" y=\"3710.000000\" width=\"3027.000000\" height=\"586.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"2548.500000\" y=\"3743.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.myhome\"><g class=\"shape\" ><rect x=\"1493.000000\" y=\"62.000000\" width=\"2163.000000\" height=\"2523.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"2574.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">myhome</text></g><g id=\"java.math\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"3765.000000\" width=\"240.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"182.000000\" y=\"3794.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">math</text></g><g id=\"java.util\"><g class=\"shape\" ><rect x=\"322.000000\" y=\"3765.000000\" width=\"643.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"643.500000\" y=\"3794.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">util</text></g><g id=\"org.junit\"><g class=\"shape\" ><rect x=\"1085.000000\" y=\"3765.000000\" width=\"984.000000\" height=\"481.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"1577.000000\" y=\"3794.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">junit</text></g><g id=\"org.mockito\"><g class=\"shape\" ><rect x=\"2089.000000\" y=\"3765.000000\" width=\"1364.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"2771.000000\" y=\"3794.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">mockito</text></g><g id=\"org.springframework\"><g class=\"shape\" ><rect x=\"3473.000000\" y=\"3765.000000\" width=\"539.000000\" height=\"271.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"3742.500000\" y=\"3794.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">springframework</text></g><g id=\"com.myhome.controllers\"><g class=\"shape\" ><rect x=\"1543.000000\" y=\"112.000000\" width=\"1428.000000\" height=\"1267.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"2257.000000\" y=\"137.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">controllers</text></g><g id=\"com.myhome.domain\"><g class=\"shape\" ><rect x=\"1966.000000\" y=\"2369.000000\" width=\"213.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"2072.500000\" y=\"2394.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">domain</text></g><g id=\"com.myhome.model\"><g class=\"shape\" ><rect x=\"2199.000000\" y=\"2369.000000\" width=\"1107.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"2752.500000\" y=\"2394.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">model</text></g><g id=\"com.myhome.services\"><g class=\"shape\" ><rect x=\"3326.000000\" y=\"2369.000000\" width=\"279.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"3465.500000\" y=\"2394.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">services</text></g><g id=\"java.math.BigDecimal\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"3815.000000\" width=\"140.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"182.000000\" y=\"3853.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">BigDecimal</text></g><g id=\"java.util.HashSet\"><g class=\"shape\" ><rect x=\"372.000000\" y=\"3820.000000\" width=\"111.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"427.500000\" y=\"3858.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">HashSet</text></g><g id=\"java.util.Optional\"><g class=\"shape\" ><rect x=\"503.000000\" y=\"3820.000000\" width=\"122.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"564.000000\" y=\"3858.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Optional</text></g><g id=\"org.junit.jupiter\"><g class=\"shape\" ><rect x=\"1135.000000\" y=\"3820.000000\" width=\"884.000000\" height=\"376.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"1577.000000\" y=\"3845.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">jupiter</text></g><g id=\"org.mockito.InjectMocks\"><g class=\"shape\" ><rect x=\"2139.000000\" y=\"3820.000000\" width=\"149.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2213.500000\" y=\"3858.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">InjectMocks</text></g><g id=\"org.mockito.Mock\"><g class=\"shape\" ><rect x=\"2308.000000\" y=\"3820.000000\" width=\"84.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2350.000000\" y=\"3858.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Mock</text></g><g id=\"org.mockito.MockitoAnnotations\"><g class=\"shape\" ><rect x=\"2412.000000\" y=\"3820.000000\" width=\"218.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2521.000000\" y=\"3858.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">MockitoAnnotations</text></g><g id=\"org.springframework.http\"><g class=\"shape\" ><rect x=\"3523.000000\" y=\"3820.000000\" width=\"439.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"3742.500000\" y=\"3845.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">http</text></g><g id=\"java.util.Collections\"><g class=\"shape\" ><rect x=\"645.000000\" y=\"3820.000000\" width=\"270.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"780.000000\" y=\"3845.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">Collections</text></g><g id=\"org.mockito.ArgumentMatchers\"><g class=\"shape\" ><rect x=\"2650.000000\" y=\"3820.000000\" width=\"205.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"2752.500000\" y=\"3845.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">ArgumentMatchers</text></g><g id=\"org.mockito.BDDMockito\"><g class=\"shape\" ><rect x=\"2875.000000\" y=\"3820.000000\" width=\"193.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"2971.500000\" y=\"3845.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">BDDMockito</text></g><g id=\"org.mockito.Mockito\"><g class=\"shape\" ><rect x=\"3088.000000\" y=\"3820.000000\" width=\"315.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"3245.500000\" y=\"3845.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">Mockito</text></g><g id=\"com.myhome.controllers.AmenityControllerTest\"><g class=\"shape\" ><rect x=\"1593.000000\" y=\"162.000000\" width=\"1120.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"2153.000000\" y=\"200.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">AmenityControllerTest</text></g><g id=\"com.myhome.controllers.mapper\"><g class=\"shape\" ><rect x=\"2237.000000\" y=\"1163.000000\" width=\"298.000000\" height=\"166.000000\" class=\" stroke-B1 fill-N7\" style=\"stroke-width:2;\" /></g><text x=\"2386.000000\" y=\"1184.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:16px\">mapper</text></g><g id=\"com.myhome.domain.Amenity\"><g class=\"shape\" ><rect x=\"2016.000000\" y=\"2419.000000\" width=\"113.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"2072.500000\" y=\"2457.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Amenity</text></g><g id=\"com.myhome.model.AddAmenityRequest\"><g class=\"shape\" ><rect x=\"2249.000000\" y=\"2419.000000\" width=\"208.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2353.000000\" y=\"2457.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">AddAmenityRequest</text></g><g id=\"com.myhome.model.AddAmenityResponse\"><g class=\"shape\" ><rect x=\"2477.000000\" y=\"2419.000000\" width=\"218.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2586.000000\" y=\"2457.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">AddAmenityResponse</text></g><g id=\"com.myhome.controllers.dto\"><g class=\"shape\" ><rect x=\"2638.000000\" y=\"1163.000000\" width=\"241.000000\" height=\"166.000000\" class=\" stroke-B1 fill-N7\" style=\"stroke-width:2;\" /></g><text x=\"2758.500000\" y=\"1184.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:16px\">dto</text></g><g id=\"com.myhome.model.GetAmenityDetailsResponse\"><g class=\"shape\" ><rect x=\"2715.000000\" y=\"2419.000000\" width=\"285.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2857.500000\" y=\"2457.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">GetAmenityDetailsResponse</text></g><g id=\"com.myhome.model.UpdateAmenityRequest\"><g class=\"shape\" ><rect x=\"3020.000000\" y=\"2419.000000\" width=\"236.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"3138.000000\" y=\"2457.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">UpdateAmenityRequest</text></g><g id=\"com.myhome.services.AmenityService\"><g class=\"shape\" ><rect x=\"3376.000000\" y=\"2419.000000\" width=\"179.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"3465.500000\" y=\"2457.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">AmenityService</text></g><g id=\"org.junit.jupiter.api\"><g class=\"shape\" ><rect x=\"1185.000000\" y=\"3875.000000\" width=\"784.000000\" height=\"271.000000\" class=\" stroke-B1 fill-N7\" style=\"stroke-width:2;\" /></g><text x=\"1577.000000\" y=\"3896.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:16px\">api</text></g><g id=\"org.springframework.http.HttpStatus\"><g class=\"shape\" ><rect x=\"3573.000000\" y=\"3870.000000\" width=\"140.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"3643.000000\" y=\"3908.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">HttpStatus</text></g><g id=\"org.springframework.http.ResponseEntity\"><g class=\"shape\" ><rect x=\"3733.000000\" y=\"3870.000000\" width=\"179.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"3822.500000\" y=\"3908.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">ResponseEntity</text></g><g id=\"java.util.Collections.singletonList\"><g class=\"shape\" ><rect x=\"695.000000\" y=\"3870.000000\" width=\"170.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"780.000000\" y=\"3908.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">singletonList</text></g><g id=\"org.mockito.ArgumentMatchers.any\"><g class=\"shape\" ><rect x=\"2715.000000\" y=\"3870.000000\" width=\"75.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2752.500000\" y=\"3908.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">any</text></g><g id=\"org.mockito.BDDMockito.given\"><g class=\"shape\" ><rect x=\"2925.000000\" y=\"3870.000000\" width=\"93.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"2971.500000\" y=\"3908.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">given</text></g><g id=\"org.mockito.Mockito.never\"><g class=\"shape\" ><rect x=\"3138.000000\" y=\"3870.000000\" width=\"92.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"3184.000000\" y=\"3908.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">never</text></g><g id=\"org.mockito.Mockito.verify\"><g class=\"shape\" ><rect x=\"3250.000000\" y=\"3870.000000\" width=\"103.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"3301.500000\" y=\"3908.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">verify</text></g><g id=\"com.myhome.controllers.mapper.AmenityApiMapper\"><g class=\"shape\" ><rect x=\"2287.000000\" y=\"1213.000000\" width=\"198.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"2386.000000\" y=\"1251.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">AmenityApiMapper</text></g><g id=\"com.myhome.controllers.dto.AmenityDto\"><g class=\"shape\" ><rect x=\"2688.000000\" y=\"1213.000000\" width=\"141.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"2758.500000\" y=\"1251.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">AmenityDto</text></g><g id=\"org.junit.jupiter.api.BeforeEach\"><g class=\"shape\" ><rect x=\"1235.000000\" y=\"3930.000000\" width=\"140.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1305.000000\" y=\"3968.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">BeforeEach</text></g><g id=\"org.junit.jupiter.api.Test\"><g class=\"shape\" ><rect x=\"1395.000000\" y=\"3930.000000\" width=\"83.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1436.500000\" y=\"3968.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Test</text></g><g id=\"org.junit.jupiter.api.Assertions\"><g class=\"shape\" ><rect x=\"1498.000000\" y=\"3930.000000\" width=\"421.000000\" height=\"166.000000\" class=\" stroke-B1 fill-N7\" style=\"stroke-width:2;\" /></g><text x=\"1708.500000\" y=\"3951.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:16px\">Assertions</text></g><g id=\"org.junit.jupiter.api.Assertions.assertEquals\"><g class=\"shape\" ><rect x=\"1548.000000\" y=\"3980.000000\" width=\"160.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1628.000000\" y=\"4018.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">assertEquals</text></g><g id=\"org.junit.jupiter.api.Assertions.assertNull\"><g class=\"shape\" ><rect x=\"1728.000000\" y=\"3980.000000\" width=\"141.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1798.500000\" y=\"4018.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">assertNull</text></g><g id=\"com.myhome.controllers.(AmenityControllerTest -&gt; mapper.AmenityApiMapper)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 2442.748047 229.000000 L 2442.748047 1210.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2477.000000\" y=\"1203.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; domain.Amenity)[0]\"><path d=\"M 2288.264893 229.000000 L 2288.264893 908.000000 S 2288.264893 918.000000 2278.264893 918.000000 L 2132.178955 918.000000 S 2122.178955 918.000000 2122.178955 928.000000 L 2122.178955 2264.000000 S 2122.178955 2274.000000 2112.178955 2274.000000 L 2063.813965 2274.000000 S 2053.813965 2274.000000 2053.813965 2284.000000 L 2053.813965 2416.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2088.000000\" y=\"2409.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; model.AddAmenityRequest)[0]\"><path d=\"M 2365.507080 229.000000 L 2365.507080 1008.000000 S 2365.507080 1018.000000 2355.507080 1018.000000 L 2181.800049 1018.000000 S 2171.800049 1018.000000 2171.800049 1028.000000 L 2171.800049 1664.000000 S 2171.800049 1674.000000 2181.800049 1674.000000 L 2343.146973 1674.000000 S 2353.146973 1674.000000 2353.146973 1684.000000 L 2353.146973 2415.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2387.000000\" y=\"2409.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; model.AddAmenityResponse)[0]\"><path d=\"M 2404.126953 229.000000 L 2404.126953 1058.000000 S 2404.126953 1068.000000 2394.126953 1068.000000 L 2206.610107 1068.000000 S 2196.610107 1068.000000 2196.610107 1078.000000 L 2196.610107 1614.000000 S 2196.610107 1624.000000 2206.610107 1624.000000 L 2576.146973 1624.000000 S 2586.146973 1624.000000 2586.146973 1634.000000 L 2586.146973 2415.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2620.000000\" y=\"2409.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.controllers.(AmenityControllerTest -&gt; dto.AmenityDto)[0]\"><path d=\"M 2597.230957 229.000000 L 2597.230957 358.000000 S 2597.230957 368.000000 2607.230957 368.000000 L 2725.610107 368.000000 S 2735.610107 368.000000 2735.610107 378.000000 L 2735.610107 1210.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2770.000000\" y=\"1203.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; model.GetAmenityDetailsResponse)[0]\"><path d=\"M 2481.368896 229.000000 L 2481.368896 508.000000 S 2481.368896 518.000000 2491.368896 518.000000 L 2565.610107 518.000000 S 2575.610107 518.000000 2575.610107 528.000000 L 2575.610107 1564.000000 S 2575.610107 1574.000000 2585.610107 1574.000000 L 2847.646973 1574.000000 S 2857.646973 1574.000000 2857.646973 1584.000000 L 2857.646973 2415.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2892.000000\" y=\"2409.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; model.UpdateAmenityRequest)[0]\"><path d=\"M 2519.989014 229.000000 L 2519.989014 458.000000 S 2519.989014 468.000000 2529.989014 468.000000 L 2576.610107 468.000000 S 2586.610107 468.000000 2586.610107 478.000000 L 2586.610107 1514.000000 S 2586.610107 1524.000000 2596.610107 1524.000000 L 3088.813965 1524.000000 S 3098.813965 1524.000000 3098.813965 1534.000000 L 3098.813965 2416.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"3133.000000\" y=\"2409.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; services.AmenityService)[0]\"><path d=\"M 2674.471924 229.000000 L 2674.471924 258.000000 S 2674.471924 268.000000 2684.471924 268.000000 L 3455.646973 268.000000 S 3465.646973 268.000000 3465.646973 278.000000 L 3465.646973 2416.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"3500.000000\" y=\"2409.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; java.math.BigDecimal)[0]\"><path d=\"M 1631.713989 229.000000 L 1631.713989 1414.000000 S 1631.713989 1424.000000 1621.713989 1424.000000 L 192.000000 1424.000000 S 182.000000 1424.000000 182.000000 1434.000000 L 182.000000 3811.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"216.000000\" y=\"3805.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; java.util.HashSet)[0]\"><path d=\"M 1670.333984 229.000000 L 1670.333984 1464.000000 S 1670.333984 1474.000000 1660.333984 1474.000000 L 437.500000 1474.000000 S 427.500000 1474.000000 427.500000 1484.000000 L 427.500000 3816.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"462.000000\" y=\"3810.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; java.util.Optional)[0]\"><path d=\"M 1708.954956 229.000000 L 1708.954956 1514.000000 S 1708.954956 1524.000000 1698.954956 1524.000000 L 574.000000 1524.000000 S 564.000000 1524.000000 564.000000 1534.000000 L 564.000000 3816.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"598.000000\" y=\"3810.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.junit.jupiter.api.BeforeEach)[0]\"><path d=\"M 1747.576050 229.000000 L 1747.576050 1564.000000 S 1747.576050 1574.000000 1737.576050 1574.000000 L 1671.833984 1574.000000 S 1661.833984 1574.000000 1661.833984 1584.000000 L 1661.833984 2629.990967 C 1661.833984 2630.009033 1661.852051 2629.990967 1661.852051 2630.009033 L 1661.852051 3405.000000 S 1661.852051 3415.000000 1651.852051 3415.000000 L 1315.000000 3415.000000 S 1305.000000 3415.000000 1305.000000 3425.000000 L 1305.000000 3926.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"1339.000000\" y=\"3920.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.junit.jupiter.api.Test)[0]\"><path d=\"M 1780.833984 229.000000 L 1780.833984 1614.000000 S 1780.833984 1624.000000 1770.833984 1624.000000 L 1693.963989 1624.000000 S 1683.963989 1624.000000 1683.963989 1634.000000 L 1683.963989 2673.952515 C 1683.963989 2686.047485 1671.869019 2673.952515 1671.869019 2686.047485 L 1671.869019 3455.000000 S 1671.869019 3465.000000 1661.869019 3465.000000 L 1446.500000 3465.000000 S 1436.500000 3465.000000 1436.500000 3475.000000 L 1436.500000 3926.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"1471.000000\" y=\"3920.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.mockito.InjectMocks)[0]\"><path d=\"M 1805.645020 229.000000 L 1805.645020 1664.000000 S 1805.645020 1674.000000 1795.645020 1674.000000 L 1711.869019 1674.000000 S 1701.869019 1674.000000 1701.869019 1684.000000 L 1701.869019 3605.000000 S 1701.869019 3615.000000 1711.869019 3615.000000 L 2203.500000 3615.000000 S 2213.500000 3615.000000 2213.500000 3625.000000 L 2213.500000 3816.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2248.000000\" y=\"3810.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.mockito.Mock)[0]\"><path d=\"M 1902.057983 229.000000 L 1902.057983 408.000000 S 1902.057983 418.000000 1892.057983 418.000000 L 1865.265015 418.000000 S 1855.265015 418.000000 1855.265015 428.000000 L 1855.265015 1764.000000 S 1855.265015 1774.000000 1845.265015 1774.000000 L 1747.678955 1774.000000 S 1737.678955 1774.000000 1737.678955 1784.000000 L 1737.678955 2873.547546 C 1737.678955 2886.452454 1724.774048 2873.547546 1724.774048 2886.452454 L 1724.774048 3555.000000 S 1724.774048 3565.000000 1734.774048 3565.000000 L 2340.000000 3565.000000 S 2350.000000 3565.000000 2350.000000 3575.000000 L 2350.000000 3816.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2384.000000\" y=\"3810.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.mockito.MockitoAnnotations)[0]\"><path d=\"M 1830.454956 229.000000 L 1830.454956 1714.000000 S 1830.454956 1724.000000 1820.454956 1724.000000 L 1729.774048 1724.000000 S 1719.774048 1724.000000 1719.774048 1734.000000 L 1719.774048 2922.500000 C 1719.774048 2937.500000 1734.774048 2922.500000 1734.774048 2937.500000 L 1734.774048 3505.000000 S 1734.774048 3515.000000 1744.774048 3515.000000 L 2511.000000 3515.000000 S 2521.000000 3515.000000 2521.000000 3525.000000 L 2521.000000 3816.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2555.000000\" y=\"3810.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.springframework.http.HttpStatus)[0]\"><path d=\"M 1979.300049 229.000000 L 1979.300049 508.000000 S 1979.300049 518.000000 1969.300049 518.000000 L 1914.885986 518.000000 S 1904.885986 518.000000 1904.885986 528.000000 L 1904.885986 1864.000000 S 1904.885986 1874.000000 1894.885986 1874.000000 L 1783.489014 1874.000000 S 1773.489014 1874.000000 1773.489014 1884.000000 L 1773.489014 3255.000000 S 1773.489014 3265.000000 1783.489014 3265.000000 L 3633.000000 3265.000000 S 3643.000000 3265.000000 3643.000000 3275.000000 L 3643.000000 3866.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"3677.000000\" y=\"3860.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.springframework.http.ResponseEntity)[0]\"><path d=\"M 2017.920044 229.000000 L 2017.920044 558.000000 S 2017.920044 568.000000 2007.920044 568.000000 L 1939.696045 568.000000 S 1929.696045 568.000000 1929.696045 578.000000 L 1929.696045 1914.000000 S 1929.696045 1924.000000 1919.696045 1924.000000 L 1804.500977 1924.000000 S 1794.500977 1924.000000 1794.500977 1934.000000 L 1794.500977 3205.000000 S 1794.500977 3215.000000 1804.500977 3215.000000 L 3812.500000 3215.000000 S 3822.500000 3215.000000 3822.500000 3225.000000 L 3822.500000 3866.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"3857.000000\" y=\"3860.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; java.util.Collections.singletonList)[0]\"><path d=\"M 1940.678955 229.000000 L 1940.678955 458.000000 S 1940.678955 468.000000 1930.678955 468.000000 L 1890.076050 468.000000 S 1880.076050 468.000000 1880.076050 478.000000 L 1880.076050 1814.000000 S 1880.076050 1824.000000 1870.076050 1824.000000 L 1765.583984 1824.000000 S 1755.583984 1824.000000 1755.583984 1834.000000 L 1755.583984 2720.000000 S 1755.583984 2730.000000 1745.583984 2730.000000 L 790.000000 2730.000000 S 780.000000 2730.000000 780.000000 2740.000000 L 780.000000 3866.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"814.000000\" y=\"3860.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.junit.jupiter.api.Assertions.assertEquals)[0]\"><path d=\"M 2095.162109 229.000000 L 2095.162109 658.000000 S 2095.162109 668.000000 2085.162109 668.000000 L 1989.317017 668.000000 S 1979.317017 668.000000 1979.317017 678.000000 L 1979.317017 2014.000000 S 1979.317017 2024.000000 1969.317017 2024.000000 L 1854.121948 2024.000000 S 1844.121948 2024.000000 1844.121948 2034.000000 L 1844.121948 2770.000000 S 1844.121948 2780.000000 1834.121948 2780.000000 L 1691.869019 2780.000000 S 1681.869019 2780.000000 1681.869019 2790.000000 L 1681.869019 3505.000000 S 1681.869019 3515.000000 1671.869019 3515.000000 L 1638.000000 3515.000000 S 1628.000000 3515.000000 1628.000000 3525.000000 L 1628.000000 3976.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"1662.000000\" y=\"3970.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.junit.jupiter.api.Assertions.assertNull)[0]\"><path d=\"M 2056.541016 229.000000 L 2056.541016 608.000000 S 2056.541016 618.000000 2046.541016 618.000000 L 1964.506958 618.000000 S 1954.506958 618.000000 1954.506958 628.000000 L 1954.506958 1964.000000 S 1954.506958 1974.000000 1944.506958 1974.000000 L 1829.311035 1974.000000 S 1819.311035 1974.000000 1819.311035 1984.000000 L 1819.311035 2820.000000 S 1819.311035 2830.000000 1809.311035 2830.000000 L 1701.869019 2830.000000 S 1691.869019 2830.000000 1691.869019 2840.000000 L 1691.869019 3655.000000 S 1691.869019 3665.000000 1701.869019 3665.000000 L 1788.500000 3665.000000 S 1798.500000 3665.000000 1798.500000 3675.000000 L 1798.500000 3976.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"1833.000000\" y=\"3970.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.mockito.ArgumentMatchers.any)[0]\"><path d=\"M 2133.782959 229.000000 L 2133.782959 708.000000 S 2133.782959 718.000000 2123.782959 718.000000 L 2019.126953 718.000000 S 2009.126953 718.000000 2009.126953 728.000000 L 2009.126953 2064.000000 S 2009.126953 2074.000000 1999.126953 2074.000000 L 1874.526978 2074.000000 S 1864.526978 2074.000000 1864.526978 2084.000000 L 1864.526978 2870.000000 S 1864.526978 2880.000000 1854.526978 2880.000000 L 1809.008057 2880.000000 S 1799.008057 2880.000000 1799.008057 2890.000000 L 1799.008057 3455.000000 S 1799.008057 3465.000000 1809.008057 3465.000000 L 2742.500000 3465.000000 S 2752.500000 3465.000000 2752.500000 3475.000000 L 2752.500000 3866.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"2787.000000\" y=\"3860.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.mockito.BDDMockito.given)[0]\"><path d=\"M 2172.403076 229.000000 L 2172.403076 758.000000 S 2172.403076 768.000000 2162.403076 768.000000 L 2057.748047 768.000000 S 2047.748047 768.000000 2047.748047 778.000000 L 2047.748047 2114.000000 S 2047.748047 2124.000000 2037.748047 2124.000000 L 1899.337036 2124.000000 S 1889.337036 2124.000000 1889.337036 2134.000000 L 1889.337036 2920.000000 S 1889.337036 2930.000000 1879.337036 2930.000000 L 1826.412964 2930.000000 S 1816.412964 2930.000000 1816.412964 2940.000000 L 1816.412964 3405.000000 S 1816.412964 3415.000000 1826.412964 3415.000000 L 2961.500000 3415.000000 S 2971.500000 3415.000000 2971.500000 3425.000000 L 2971.500000 3866.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"3006.000000\" y=\"3860.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.mockito.Mockito.never)[0]\"><path d=\"M 2211.023926 229.000000 L 2211.023926 808.000000 S 2211.023926 818.000000 2201.023926 818.000000 L 2082.558105 818.000000 S 2072.558105 818.000000 2072.558105 828.000000 L 2072.558105 2164.000000 S 2072.558105 2174.000000 2062.558105 2174.000000 L 1917.241943 2174.000000 S 1907.241943 2174.000000 1907.241943 2184.000000 L 1907.241943 2970.000000 S 1907.241943 2980.000000 1897.241943 2980.000000 L 1840.365967 2980.000000 S 1830.365967 2980.000000 1830.365967 2990.000000 L 1830.365967 3355.000000 S 1830.365967 3365.000000 1840.365967 3365.000000 L 3174.000000 3365.000000 S 3184.000000 3365.000000 3184.000000 3375.000000 L 3184.000000 3866.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"3218.000000\" y=\"3860.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.controllers.AmenityControllerTest -&gt; org.mockito.Mockito.verify)[0]\"><path d=\"M 2249.645020 229.000000 L 2249.645020 858.000000 S 2249.645020 868.000000 2239.645020 868.000000 L 2107.368896 868.000000 S 2097.368896 868.000000 2097.368896 878.000000 L 2097.368896 2214.000000 S 2097.368896 2224.000000 2087.368896 2224.000000 L 1935.146973 2224.000000 S 1925.146973 2224.000000 1925.146973 2234.000000 L 1925.146973 3020.000000 S 1925.146973 3030.000000 1915.146973 3030.000000 L 1854.317993 3030.000000 S 1844.317993 3030.000000 1844.317993 3040.000000 L 1844.317993 3305.000000 S 1844.317993 3315.000000 1854.317993 3315.000000 L 3291.500000 3315.000000 S 3301.500000 3315.000000 3301.500000 3325.000000 L 3301.500000 3866.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /><text x=\"3336.000000\" y=\"3860.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; domain.Amenity)[1]\"><path d=\"M 2326.885986 229.000000 L 2326.885986 958.000000 S 2326.885986 968.000000 2316.885986 968.000000 L 2156.989014 968.000000 S 2146.989014 968.000000 2146.989014 978.000000 L 2146.989014 2314.000000 S 2146.989014 2324.000000 2136.989014 2324.000000 L 2101.480957 2324.000000 S 2091.480957 2324.000000 2091.480957 2334.000000 L 2091.480957 2416.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /></g><g id=\"com.myhome.controllers.(AmenityControllerTest -&gt; dto.AmenityDto)[1]\"><path d=\"M 2635.852051 229.000000 L 2635.852051 308.000000 S 2635.852051 318.000000 2645.852051 318.000000 L 2772.610107 318.000000 S 2782.610107 318.000000 2782.610107 328.000000 L 2782.610107 1210.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /></g><g id=\"com.myhome.(controllers.AmenityControllerTest -&gt; model.UpdateAmenityRequest)[1]\"><path d=\"M 2558.610107 229.000000 L 2558.610107 408.000000 S 2558.610107 418.000000 2568.610107 418.000000 L 2587.610107 418.000000 S 2597.610107 418.000000 2597.610107 428.000000 L 2597.610107 1464.000000 S 2597.610107 1474.000000 2607.610107 1474.000000 L 3167.480957 1474.000000 S 3177.480957 1474.000000 3177.480957 1484.000000 L 3177.480957 2416.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-3855246913)\" /></g><mask id=\"d2-3855246913\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"4052\" height=\"4286\">\n<rect x=\"11\" y=\"11\" width=\"4052\" height=\"4286\" fill=\"white\"></rect>\n<rect x=\"2550.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"488.500000\" y=\"3715.000000\" width=\"50\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2529.500000\" y=\"3715.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2530.500000\" y=\"67.000000\" width=\"88\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"156.000000\" y=\"3770.000000\" width=\"52\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"627.000000\" y=\"3770.000000\" width=\"33\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1553.000000\" y=\"3770.000000\" width=\"48\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2730.500000\" y=\"3770.000000\" width=\"81\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3656.000000\" y=\"3770.000000\" width=\"173\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2211.500000\" y=\"117.000000\" width=\"91\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2040.500000\" y=\"2374.000000\" width=\"64\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2726.000000\" y=\"2374.000000\" width=\"53\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3432.000000\" y=\"2374.000000\" width=\"67\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"134.500000\" y=\"3837.500000\" width=\"95\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"394.500000\" y=\"3842.500000\" width=\"66\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"525.500000\" y=\"3842.500000\" width=\"77\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1548.500000\" y=\"3825.000000\" width=\"57\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2161.500000\" y=\"3842.500000\" width=\"104\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2330.500000\" y=\"3842.500000\" width=\"39\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2434.500000\" y=\"3842.500000\" width=\"173\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3725.000000\" y=\"3825.000000\" width=\"35\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"734.000000\" y=\"3825.000000\" width=\"92\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2672.500000\" y=\"3825.000000\" width=\"160\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2920.500000\" y=\"3825.000000\" width=\"102\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3212.500000\" y=\"3825.000000\" width=\"66\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2052.500000\" y=\"184.500000\" width=\"201\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2359.500000\" y=\"1168.000000\" width=\"53\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2038.500000\" y=\"2441.500000\" width=\"68\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2271.500000\" y=\"2441.500000\" width=\"163\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2499.500000\" y=\"2441.500000\" width=\"173\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2747.000000\" y=\"1168.000000\" width=\"23\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2737.500000\" y=\"2441.500000\" width=\"240\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3042.500000\" y=\"2441.500000\" width=\"191\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3398.500000\" y=\"2441.500000\" width=\"134\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1567.000000\" y=\"3880.000000\" width=\"20\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3595.500000\" y=\"3892.500000\" width=\"95\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3755.500000\" y=\"3892.500000\" width=\"134\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"717.500000\" y=\"3892.500000\" width=\"125\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2737.500000\" y=\"3892.500000\" width=\"30\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2947.500000\" y=\"3892.500000\" width=\"48\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3160.500000\" y=\"3892.500000\" width=\"47\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"3272.500000\" y=\"3892.500000\" width=\"58\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2309.500000\" y=\"1235.500000\" width=\"153\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"2710.500000\" y=\"1235.500000\" width=\"96\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1257.500000\" y=\"3952.500000\" width=\"95\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1417.500000\" y=\"3952.500000\" width=\"38\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1673.500000\" y=\"3935.000000\" width=\"70\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1570.500000\" y=\"4002.500000\" width=\"115\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1750.500000\" y=\"4002.500000\" width=\"96\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.controllers.mapper.AmenityApiMapper: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.domain.Amenity: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.model.AddAmenityRequest: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.model.AddAmenityResponse: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.controllers.dto.AmenityDto: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.model.GetAmenityDetailsResponse: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.model.UpdateAmenityRequest: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.services.AmenityService: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> java.math.BigDecimal: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> java.util.HashSet: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> java.util.Optional: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.junit.jupiter.api.BeforeEach: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.junit.jupiter.api.Test: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.mockito.InjectMocks: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.mockito.Mock: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.mockito.MockitoAnnotations: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.springframework.http.HttpStatus: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.springframework.http.ResponseEntity: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> java.util.Collections.singletonList: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.junit.jupiter.api.Assertions.assertEquals: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.junit.jupiter.api.Assertions.assertNull: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.mockito.ArgumentMatchers.any: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.mockito.BDDMockito.given: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.mockito.Mockito.never: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> org.mockito.Mockito.verify: {\n  target-arrowhead: \"imports\"\n  style: {\n    stroke: \"#26de81\"\n    stroke-dash: 3\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.domain.Amenity: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.controllers.dto.AmenityDto: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest -> com.myhome.model.UpdateAmenityRequest: {\n  style: {\n    stroke: \"#26de81\"\n  }\n}\n\njava.util.HashSet: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.junit.jupiter.api.Test: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.myhome.model.GetAmenityDetailsResponse: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.springframework.http.ResponseEntity: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.util.Collections.singletonList: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.junit.jupiter.api.Assertions.assertNull: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.mockito.Mockito.never: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.mockito.Mockito.verify: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.junit.jupiter.api.BeforeEach: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.junit.jupiter.api.Assertions.assertEquals: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.myhome.model.AddAmenityResponse: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.mockito.InjectMocks: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.mockito.MockitoAnnotations: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.springframework.http.HttpStatus: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.math.BigDecimal: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\njava.util.Optional: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.mockito.BDDMockito.given: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.mockito.Mock: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.myhome.model.UpdateAmenityRequest: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\norg.mockito.ArgumentMatchers.any: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.myhome.model.AddAmenityRequest: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    border-radius: 100\n  }\n}\n\ncom.myhome.model.UpdateAmenityRequest: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.myhome.domain.Amenity: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.myhome.controllers.dto.AmenityDto: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.myhome.services.AmenityService: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.myhome.controllers.mapper.AmenityApiMapper: {\n  style: {\n    font: mono\n    fill: \"#717D86\"\n    stroke-width: 0\n  }\n}\n\ncom.myhome.controllers.AmenityControllerTest: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "5f7e7e63-3eb5-a591-1c42-5733a7893663",
            "ancestors": [],
            "description": "Is a JUnit test suite for testing the functionality of an Amenity Controller in a web application. The tests cover scenarios such as adding, retrieving, updating, and deleting amenities, including handling cases where community IDs do not exist.",
            "name": "AmenityControllerTest",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 200,
            "docLength": null
          },
          {
            "id": "7526a557-88ab-aab9-624a-94abd07ed8ee",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Adds an amenity to a community. It creates an `AddAmenityRequest` object with amenities and sends it to the `amenityController` to add the amenity to the community. The response is expected to be HTTP status OK (200).",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ResponseEntity<AddAmenityResponse> response = amenityController.addAmenityToCommunity(\"communityId\", request);",
              "description": ""
            },
            "name": "shouldAddAmenityToCommunity",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "3bcdace8-be80-8eac-8a41-2a9ca4223823",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Tests adding an amenity to a community that does not exist. It creates an amenities set and a request object, then mocks the service layer's response as empty. The controller's addAmenityToCommunity method is called with the request and a non-existent community ID.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ResponseEntity<AddAmenityResponse> response = amenityController.addAmenityToCommunity(\"communityId\", request);\nif (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    System.out.println(\"The community does not exist.\");\n}",
              "description": ""
            },
            "name": "shouldNotAddAmenityWhenCommunityNotExists",
            "location": {
              "start": 86,
              "insert": 86,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "86f86092-db5e-3a83-5c43-e90ec1dfa421",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Initializes Mockito annotations for the current object, ensuring that any annotated mocks are set up properly before each test is run. This allows for efficient and reliable testing with Mockito. Mocks are initialized to have specific behaviors or returns for each test.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@BeforeEach\nprivate void init() {\n    MockitoAnnotations.initMocks(this);\n}\n\n@Test\nvoid testMethod() {\n    // Call the method that uses injected mocks\n}\n",
              "description": "\nIn this example, the `init` method is called before each test method to initialize any mock objects that are injected into the class being tested."
            },
            "name": "init",
            "location": {
              "start": 104,
              "insert": 104,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "4a0a263f-9852-7889-da45-5366383f06b8",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Retrieves amenity details by ID, maps them to a response object, and returns it as an HTTP response with a status code of OK. It uses a service layer for data access and an API mapper for response conversion.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ResponseEntity<GetAmenityDetailsResponse> response = \n    amenityController.getAmenityDetails(\"test-amenity-id\");",
              "description": ""
            },
            "name": "getAmenityDetails",
            "location": {
              "start": 109,
              "insert": 109,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "1075d564-6ac4-faa2-ce46-4ca621bded85",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Mocks a non-existent amenity ID to test the controller's response when the requested amenity does not exist. It verifies that the response body is null and the status code is NOT_FOUND, while also checking that the service and mapper were not used.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ResponseEntity<GetAmenityDetailsResponse> response = \n  amenityController.getAmenityDetails(TEST_AMENITY_ID);\n",
              "description": ""
            },
            "name": "getAmenityDetailsNotExists",
            "location": {
              "start": 133,
              "insert": 133,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "caa7a895-3a82-b495-674f-5050039bacac",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Deletes an amenity identified by the specified ID and verifies that it is successfully deleted. It tests whether the response body is null and the status code is NO CONTENT, indicating a successful deletion.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);",
              "description": ""
            },
            "name": "deleteAmenity",
            "location": {
              "start": 150,
              "insert": 150,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "866a203e-554d-83a1-a248-8ea515e2cd21",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Tests the deletion of an amenity that does not exist. It asserts that a null body and a NOT_FOUND status are returned, indicating the absence of the amenity. The service is also verified to have made the attempt to delete the non-existent amenity.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ResponseEntity response = amenityController.deleteAmenity(TEST_AMENITY_ID);\n",
              "description": ""
            },
            "name": "deleteAmenityNotExists",
            "location": {
              "start": 165,
              "insert": 165,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "9eb08249-61d7-b5bc-5440-1b1703aaca36",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Updates an amenity successfully and verifies the response status code as NO_CONTENT. It mocks the updateAmenityRequestToAmenityDto and updateAmenity services to test their functionality.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public ResponseEntity<Void> updateAmenity(String amenityId, UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    boolean updated = amenitySDJpaService.updateAmenity(amenityDto);\n    return ResponseEntity.status(updated ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND).build();\n}",
              "description": ""
            },
            "name": "shouldUpdateAmenitySuccessfully",
            "location": {
              "start": 180,
              "insert": 180,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "87ed5db8-18e3-9f9b-c149-306ce03bde91",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Tests whether an amenity is updated successfully when provided with a valid update request and ID, but the amenity does not exist. It asserts that the response status code should be NOT_FOUND if the amenity is not found.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = amenityController.updateAmenity(TEST_AMENITY_ID, request);\nassertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());",
              "description": ""
            },
            "name": "shouldNotUpdateCommunityAmenityIfAmenityNotExists",
            "location": {
              "start": 201,
              "insert": 201,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "18c85065-5691-11ad-f44c-8fdca501d8a1",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Creates and returns a new instance of an `Amenity` object with specific properties: `amenityId` set to `TEST_AMENITY_ID` and `description` set to `TEST_AMENITY_DESCRIPTION`. This function is used to provide a test amenity.",
            "params": [],
            "returns": {
              "type_name": "Amenity",
              "description": "an instance of class `Amenity`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Amenity testAmenity = getTestAmenity();\n",
              "description": ""
            },
            "name": "getTestAmenity",
            "location": {
              "start": 222,
              "insert": 222,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "5565c353-bf5c-6199-5045-2c77fa38d21f",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Creates an instance of `AmenityDto`. It sets various properties on the object, including its ID, amenity ID, name, description, price, and community ID, all with test data values. The constructed object is then returned as a result.",
            "params": [],
            "returns": {
              "type_name": "AmenityDto",
              "description": "an instance of `AmenityDto`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "AmenityDto testAmenityDto = getTestAmenityDto();\nSystem.out.println(testAmenityDto.getName()); \n",
              "description": ""
            },
            "name": "getTestAmenityDto",
            "location": {
              "start": 228,
              "insert": 228,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "801bd933-5e38-9985-3447-0970fad504f6",
            "ancestors": [
              "5f7e7e63-3eb5-a591-1c42-5733a7893663"
            ],
            "description": "Constructs an `UpdateAmenityRequest` object with predefined values for name, description, price, and community ID. The object is initialized with test data, represented by constants TEST_AMENITY_NAME, TEST_AMENITY_DESCRIPTION, and TEST_COMMUNITY_ID.",
            "params": [],
            "returns": {
              "type_name": "UpdateAmenityRequest",
              "description": "an instance of `UpdateAmenityRequest`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UpdateAmenityRequest updateRequest = getUpdateAmenityRequest();\n",
              "description": ""
            },
            "name": "getUpdateAmenityRequest",
            "location": {
              "start": 238,
              "insert": 238,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  }
]
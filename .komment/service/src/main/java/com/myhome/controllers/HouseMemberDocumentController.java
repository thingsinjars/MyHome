{"name":"HouseMemberDocumentController.java","path":"service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java","content":{"structured":{"description":"A REST controller that provides endpoints for managing house member documents. The controller uses Spring WebFlux and Lombok libraries. It has several methods: `getHouseMemberDocument`, `uploadHouseMemberDocument`, `updateHouseMemberDocument`, and `deleteHouseMemberDocument`. These methods handle requests to retrieve, add, update, and delete house member documents respectively.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"0ae19cce-e175-00ae-f841-4d06b0963a3b","ancestors":[],"type":"function","description":"TODO","name":"HouseMemberDocumentController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class HouseMemberDocumentController implements DocumentsApi {\n\n  private final HouseMemberDocumentService houseMemberDocumentService;\n\n  @Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":39,"insert":39,"offset":" ","indent":0},"item_type":"class","length":66},{"id":"b93652cc-d86d-e781-e946-4424259ae4dc","ancestors":["0ae19cce-e175-00ae-f841-4d06b0963a3b"],"type":"function","description":"retrieves a house member document given its ID, and returns it as a byte array with appropriate HTTP headers for caching and content type.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the house member for whom the document is being retrieved.\n\n* `memberId`: A string parameter that represents the unique identifier for a house member.","complex_type":true}],"returns":{"type_name":"ResponseEntitybyte","description":"a `ResponseEntity<byte[]>` object containing the requested document content.\n\n* `byte[] content`: The document's content as a byte array.\n* `HttpHeaders headers`: The HTTP headers for the response, including the `Cache-Control` and `Content-Type` headers with appropriate values.\n* `HttpStatus status`: The HTTP status code of the response, which is set to `OK` in this case.\n\nThe `map` method is used to generate the response entity if a `HouseMemberDocument` is found, or to return a `ResponseEntity` with a `NOT_FOUND` status code otherwise.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":"\nIn this example, the method is being used to get a house member document by its ID. The method first retrieves an optional of HouseMemberDocument using the houseMemberDocumentService's findHouseMemberDocument method, with \"memberId\" passed as an argument.\nIf the returned Optional contains a HouseMemberDocument object, then a new ResponseEntity object is created, which sets the HTTP headers for the response, and returns the document content as a byte array. The HTTP status code of the response will be 200 (OK).\nElse, if the returned Optional does not contain a HouseMemberDocument object, then a new ResponseEntity object is created with a status of 404 (Not Found), indicating that no such house member document exists."},"name":"getHouseMemberDocument","code":"@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":24},{"id":"d155722f-cdad-e29e-2e45-5d193c518727","ancestors":["0ae19cce-e175-00ae-f841-4d06b0963a3b"],"type":"function","description":"receives a request to add a house member document, validates it with the House Member Document Service, and returns a response entity indicating whether the validation was successful or not.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the member whose document is being uploaded.\n\n* `memberId`: This is the identifier for the member whose document is being uploaded. It is a String type and represents a unique identifier for the member within the application.","complex_type":true},{"name":"memberDocument","type_name":"MultipartFile","description":"document to be uploaded for a house member, which is passed through the `MultipartFile` class and used by the `houseMemberDocumentService` to create a new `HouseMemberDocument`.\n\n* `memberId`: A string representing the member ID whose document is being uploaded.\n* `memberDocument`: An instance of `MultipartFile`, which contains the document to be uploaded for the specified member ID.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code indicating whether the operation was successful or not.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT)` represents a successful response with no content, indicating that the document has been successfully uploaded and no further action is required.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND)` represents a failed response with a 404 status code, indicating that the member with the provided ID could not be found.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void uploadHouseMemberDocument_WhenCalledWithCorrectInputs_ShouldReturnSuccess() {\n  // Set up inputs for the method call\n  String memberId = \"member123\";\n  MultipartFile memberDocument = new MockMultipartFile(\"document\", \"fileName.txt\", \"text/plain\", \"Hello, world!\".getBytes());\n  \n  // Call the method\n  ResponseEntity<Void> response = houseMemberDocumentController.uploadHouseMemberDocument(memberId, memberDocument);\n  \n  // Verify that the method returned successfully\n  assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n}\n","description":""},"name":"uploadHouseMemberDocument","code":"@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"d03c231f-75a1-0f82-df41-37567c7bf575","ancestors":["0ae19cce-e175-00ae-f841-4d06b0963a3b"],"type":"function","description":"updates a house member's document based on a provided MultipartFile. If successful, it returns a `HttpStatus.NO_CONTENT` response entity. Otherwise, it returns a `HttpStatus.NOT_FOUND` response entity.","params":[{"name":"memberId","type_name":"String","description":"12-digit unique identifier of the member whose document is being updated.\n\n* `@PathVariable String memberId`: The ID of the house member whose document is being updated.\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: The updated document for the specified house member.","complex_type":true},{"name":"memberDocument","type_name":"MultipartFile","description":"document to be updated for a specific house member.\n\n* `memberId`: A string representing the member ID for which the document is to be updated.\n* `memberDocument`: A MultipartFile object containing the updated member document.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a response entity with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the update was successful.\n\n* `map`: This method is used to map the updated House Member Document to a Response Entity with a status code of `NO_CONTENT`. If the update operation succeeds, this method will return a `ResponseEntity` with a status code of `NO_CONTENT`, indicating that the document has been updated successfully.\n* `orElseGet`: This method is used as a fallback to return a `ResponseEntity` with a status code of `NOT_FOUND` if the update operation fails. This indicates that the document could not be found or updated.","complex_type":true},"usage":{"language":"java","code":"// Import required packages\nimport org.springframework.http.ResponseEntity;\nimport com.myhome.api.DocumentsApi;\n\npublic class Example {\n  public static void main(String[] args) {\n    // Set up the service and the controller\n    HouseMemberDocumentService houseMemberDocumentService = new HouseMemberDocumentService();\n    DocumentsApi documentsApi = new HouseMemberDocumentController();\n\n    // Set up the inputs for the method call\n    String memberId = \"some_member_id\";\n    MultipartFile memberDocument = // Initialize a valid multipart file object here\n\n    // Call the updateHouseMemberDocument method with the input variables\n    ResponseEntity response = documentsApi.updateHouseMemberDocument(memberId, memberDocument);\n\n    // Handle the response\n    if (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n      System.out.println(\"Document updated successfully\");\n    } else {\n      System.out.println(\"Error updating document: \" + response.getBody());\n    }\n  }\n}\n","description":"\nThe example is based on the inputs of 'memberId' and 'MultipartFile memberDocument'. The method call will update the house member document with the given id if it exists, or return a HttpStatus.NOT_FOUND error otherwise."},"name":"updateHouseMemberDocument","code":"@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":83,"insert":83,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"d338f26a-e929-febc-784f-c72e805d36a1","ancestors":["0ae19cce-e175-00ae-f841-4d06b0963a3b"],"type":"function","description":"deletes a house member document based on the inputted memberId. If the document is successfully deleted, a NO_CONTENT status code is returned. Otherwise, a NOT_FOUND status code is returned.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the house member whose document is to be deleted.\n\n* `memberId`: A string representing the unique identifier for a house member in the system. It is the path variable passed to the function.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code indicating whether the document was successfully deleted or not.\n\n* `HttpStatus`: This is an integer value that represents the HTTP status code of the response. In this case, it is either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is an object that contains the HTTP status code and other information about the response, such as the headers and body.\n* `Void`: This is a type parameter that represents the type of the value returned by the function, which is void in this case.","complex_type":true},"usage":{"language":"java","code":"// Assume that the user has already logged in to the application and their information is available in a session variable called currentUser.\nResponseEntity<Void> response = deleteHouseMemberDocument(\"123456\");\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"Document deleted successfully.\");\n} else {\n    System.out.println(\"Error: \" + response.getStatusCode());\n}\n","description":""},"name":"deleteHouseMemberDocument","code":"@Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":94,"insert":94,"offset":" ","indent":2},"item_type":"method","length":10}]}}}
{"name":"BookingController.java","path":"service/src/main/java/com/myhome/controllers/BookingController.java","content":{"structured":{"description":"a `BookingController` class that implements the `BookingsApi` interface. It has one method `deleteBooking()` that takes two path variables `amenityId` and `bookingId`, and deletes a booking based on those IDs. If the booking is deleted successfully, the method returns a `ResponseEntity` with a status of `NO_CONTENT`. Otherwise, it returns a `ResponseEntity` with a status of `NOT_FOUND`. The class uses Lombok for automated generation of getters and setters, and Spring Web for RESTful HTTP operations.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.BookingController Pages: 1 -->\n<svg width=\"190pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 190.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.BookingController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-30 0,-30 0,0 182,0 182,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Booking</text>\n<text text-anchor=\"middle\" x=\"91\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129.5,-85 52.5,-85 52.5,-66 129.5,-66 129.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91,-55.65C91,-47.36 91,-37.78 91,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87.5,-55.87 91,-65.87 94.5,-55.87 87.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"e249b2d9-428b-118e-6445-f67d48fc9471","ancestors":[],"type":"function","description":"TODO","name":"BookingController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class BookingController implements BookingsApi {\n\n  private final BookingService bookingSDJpaService;\n\n  @Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":12,"insert":12,"offset":" ","indent":0},"item_type":"class","length":18},{"id":"d0ab0ea6-4617-ffbb-2f4d-3bb2e12ada11","ancestors":["e249b2d9-428b-118e-6445-f67d48fc9471"],"type":"function","description":"deletes a booking based on its amenity ID and ID, returning a response entity indicating whether the operation was successful or not.","params":[{"name":"amenityId","type_name":"String","description":"ID of an amenity associated with the booking to be deleted.\n\n* `String amenityId`: The unique identifier for an amenity.\n* `@PathVariable String bookingId`: The unique identifier for a booking that is being deleted.","complex_type":true},{"name":"bookingId","type_name":"String","description":"ID of the booking that needs to be deleted.\n\n* `amenityId`: The ID of the amenity for which the booking is being deleted.\n* `bookingId`: The ID of the booking that needs to be deleted.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code indicating whether the booking was successfully deleted.\n\n* `ResponseEntity`: This is the class that represents the HTTP response entity, which contains information about the status code and body of the response.\n* `status`: This is a field of type `HttpStatus` that indicates the HTTP status code of the response. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `build`: This is a method that constructs the response entity based on the properties of the function's output.\n\nTherefore, the output of the `deleteBooking` function can be destructured as follows:\n\n`ResponseEntity<Void> deletedBooking = deleteBooking(amenityId, bookingId)`\n\nWhere `deletedBooking` is an instance of `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted or not.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> deleteBooking(String amenityId, String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n","description":"\nThe deleteBooking method is called with two parameters, amenityId and bookingId. The method uses these parameters to call the deleteBooking method on the BookingService object, which in turn calls the deleteBooking method on a JPA repository to delete the specified booking. The response entity returned by this method will have an HTTP status of NO_CONTENT if the booking was successfully deleted and NOT_FOUND otherwise."},"name":"deleteBooking","code":"@Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":19,"insert":19,"offset":" ","indent":2},"item_type":"method","length":10}]}}}
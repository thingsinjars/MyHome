{"name":"PaymentController.java","path":"service/src/main/java/com/myhome/controllers/PaymentController.java","content":{"structured":{"description":"a REST controller that provides endpoints for managing payments. The controller implements the `PaymentsApi` interface and provides several methods:\n\n* `schedulePayment()`: Schedules a payment for a given member and admin, checking if the admin is an administrator of the community where the member resides.\n* `listPaymentDetails()`: Lists all payments made by a given member.\n* `listAllAdminScheduledPayments()`: Lists all scheduled payments made by an administrator of a given community.\n* `isAdminInGivenCommunity()`: Checks if an admin is an administrator of a given community.\n\nThe code uses packages such as `java.util` for lists and maps, and `java.io` for building the response body.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"355737a9-ecc4-489a-3647-ae30b464a7ed","ancestors":[],"type":"function","description":"TODO","name":"PaymentController","code":"@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}","location":{"start":51,"insert":51,"offset":" ","indent":0},"item_type":"class","length":94},{"id":"ceba71d2-992e-42ba-ed4f-50c75794ea04","ancestors":["355737a9-ecc4-489a-3647-ae30b464a7ed"],"type":"function","description":"receives a request to schedule a payment, checks if the user is an admin of the community and the house, then schedules the payment using the `schedulePayment` API and returns the response.","params":[{"name":"request","type_name":"SchedulePaymentRequest","description":"SchedulePaymentRequest object containing information necessary for scheduling a payment, which is passed through the function's methods to generate a PaymentDto and then a SchedulePaymentResponse.\n\n* `request.getMemberId()`: The ID of the house member who is requesting the payment.\n* `request.getAdminId()`: The ID of the community admin who is responsible for processing the payment.\n* `paymentService.getHouseMember(request.getMemberId())`: This method retrieves a `HouseMember` object from the service, using the `request.getMemberId()` as the parameter. If the house member with the given ID does not exist, a `RuntimeException` is thrown.\n* `communityService.findCommunityAdminById(request.getAdminId())`: This method retrieves a `User` object from the service, using the `request.getAdminId()` as the parameter. If the admin with the given ID does not exist, a `RuntimeException` is thrown.\n* `isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)`: This method checks whether the admin is an admin of the community house associated with the request. If the admin is not an admin of the community house, the method returns `false`.\n\nThe rest of the function proceeds to schedule the payment using the enriched `SchedulePaymentRequest`, and finally returns a `ResponseEntity` with the scheduled payment response.","complex_type":true}],"returns":{"type_name":"SchedulePaymentResponse","description":"a `SchedulePaymentResponse` object containing the scheduled payment details.\n\n* `ResponseEntity`: This is a class that represents an HTTP response with a status code and a body. In this case, the status code is `HttpStatus.CREATED`, which indicates that the payment has been scheduled successfully.\n* `body`: This is the body of the response, which contains the `SchedulePaymentResponse` object.\n* `SchedulePaymentResponse`: This class represents the response to the API call, containing information about the scheduled payment. The properties of this class include:\n\t+ `status`: This indicates the status of the payment schedule, such as \"scheduled\" or \"cancelled\".\n\t+ `message`: This is a message indicating the result of the payment schedule, such as \"Payment scheduled successfully\" or \"Payment could not be scheduled\".\n\t+ `paymentId`: This is the ID of the payment that was scheduled.\n\t+ `createdAt`: This is the date and time when the payment was scheduled.","complex_type":true},"usage":{"language":"java","code":"// Assuming communityId and adminId are valid, get the HouseMember\nHouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n    .orElseThrow(() -> new RuntimeException(\n        \"House member with given id not exists: \" + request.getMemberId()));\nUser admin = communityService.findCommunityAdminById(request.getAdminId())\n    .orElseThrow(\n        () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n// Assuming isUserAdminOfCommunityHouse returns true for the given arguments, \n// process the payment using schedulePayment method\nfinal EnrichedSchedulePaymentRequest paymentRequest =\n    schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\nfinal PaymentDto paymentDto =\n    schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\nfinal PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n","description":""},"name":"schedulePayment","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2},"item_type":"method","length":25},{"id":"b61f547c-660d-a2b0-f74c-efd5b28d1324","ancestors":["355737a9-ecc4-489a-3647-ae30b464a7ed"],"type":"function","description":"checks if a user is an admin of a community house by checking if their username is present in the community's admin list.","params":[{"name":"communityHouse","type_name":"CommunityHouse","description":"community house that is being checked for the administrator role of the given `admin`.\n\n1. `communityHouse`: A `CommunityHouse` object that represents the community house being checked for the user's admin status.\n2. `getCommunity()`: A method that returns a `Community` object, which represents the community associated with the `CommunityHouse`.\n3. `getAdmins()`: A method that returns a `List<User>` object, which contains the list of admins for the community associated with the `CommunityHouse`.","complex_type":true},{"name":"admin","type_name":"User","description":"User object that the function checks if it is an administrator of the CommunityHouse.\n\n* `CommunityHouse communityHouse`: The class representing a community house, which contains information about the community and its members.\n* `getAdmins()`: A method that returns a list of users who are admins of the community house.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the specified user is an administrator of the community house.","complex_type":false},"usage":{"language":"java","code":"@Test\npublic void testIsUserAdminOfCommunityHouse() {\n    // given\n    CommunityHouse communityHouse = new CommunityHouse(1, \"house\", LocalDate.now(), 100);\n    User admin = new User(1, \"user\");\n    Community community = new Community(1, \"community\", 100);\n    communityHouse.setCommunity(community);\n    Set<User> admins = new HashSet<>();\n    admins.add(admin);\n    community.setAdmins(admins);\n    \n    // when\n    boolean isAdmin = isUserAdminOfCommunityHouse(communityHouse, admin);\n    \n    // then\n    assertTrue(isAdmin);\n}\n","description":"\nThis test case ensures that the method returns true if the user is an admin of the community housing the given house. The test creates a sample CommunityHouse object, a sample User object as an admin for that community, and sets them as the admins and the community housing that house respectively. It then uses those objects to invoke the method and expects the result to be true. If the user is not an admin of the community housing the given house, it would return false instead."},"name":"isUserAdminOfCommunityHouse","code":"private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"5fe3089d-cbee-65b8-e243-f149d6a86681","ancestors":["355737a9-ecc4-489a-3647-ae30b464a7ed"],"type":"function","description":"receives a payment ID and retrieves the associated payment details from the payment service using the `getPaymentDetails` method. It then maps the payment details to a `SchedulePaymentResponse` object using the `paymentToSchedulePaymentResponse` function and returns a `ResponseEntity` with an `OK` status code if the payment details are found, or an `NOT_FOUND` status code otherwise.","params":[{"name":"paymentId","type_name":"String","description":"id of the payment for which details are being requested.\n\n* `log.trace`: Emits a trace message indicating that the method has received a request to retrieve details about a payment with the specified `paymentId`.\n* `paymentService.getPaymentDetails(paymentId)`: Calls the `getPaymentDetails()` method of the `paymentService` object, passing in the `paymentId` as a parameter. This method retrieves the details of a specific payment based on its ID.\n* `schedulePaymentApiMapper.paymentToSchedulePaymentResponse(payment)`: Maps the deserialized `payment` object to a `SchedulePaymentResponse` object using the `schedulePaymentApiMapper` object. This mapping is necessary because the `payment` object does not directly correspond to the expected response type of the API.\n* `map(ResponseEntity::ok)`: Maps the result of the previous step to an instance of `ResponseEntity` with a status code of 200 (OK).\n* `orElseGet(() -> ResponseEntity.notFound().build())`: Provides an alternative response in case the `paymentService.getPaymentDetails()` method does not return a valid result. In this case, the alternative response is a `ResponseEntity` with a status code of 404 (NOT FOUND) and a built message indicating that the payment with the specified ID could not be found.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the details of the specified payment.\n\n* `paymentId`: The identifier of the payment for which details are being requested.\n* `paymentService`: A service used to retrieve payment details.\n* `schedulePaymentApiMapper`: An API mapper used to transform payment details into a `SchedulePaymentResponse` object.\n* `ResponseEntity`: A class representing a response entity, which is used to wrap the returned payment details in an HTTP response.\n\nThe function returns a `ResponseEntity` object with an `ok` status code if the payment details are successfully retrieved, or an `notFound` status code if there is no matching payment.","complex_type":true},"usage":{"language":"java","code":"@Autowired SchedulePaymentApi schedulePaymentApi;\n\npublic static void main(String[] args) {\n    ResponseEntity<SchedulePaymentResponse> response = schedulePaymentApi.listPaymentDetails(\"payment_id\");\n}\n","description":"\nThe above code would return a `ResponseEntity` object that contains the payment details of the payment with id `\"payment_id\"` if it exists, or a 404 Not Found error otherwise."},"name":"listPaymentDetails","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":91,"insert":91,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"636baf6e-892d-5980-0d49-0dfcd185b33d","ancestors":["355737a9-ecc4-489a-3647-ae30b464a7ed"],"type":"function","description":"retrieves a member's payments from the payment service and maps them to a response entity using the `memberPaymentSetToRestApiResponseMemberPaymentSet` method.","params":[{"name":"memberId","type_name":"String","description":"unique identifier for the member whose payments are to be listed.\n\n* `log.trace()`: This line logs a trace message with the ID of the member for whom payments are being listed.\n* `paymentService.getHouseMember(memberId)`: This line retrieves the house member associated with the given `memberId`. The method returns an Optional<HouseMember>, which contains the house member if found, or an empty optional if not.\n* ` paymentService.getPaymentsByMember(memberId)`: This line retrieves all payments made by the house member associated with the given `memberId`. The method returns an Optional<List<Payment>>, which contains the list of payments if found, or an empty optional if not.\n* `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet()`: This line maps the list of payments to a response entity with the appropriate structure for the API. The method takes the list of payments as input and returns a ResponseEntity containing the mapped data.\n* `new List Member Payments Response().payments(memberPayments)`: This line constructs a new instance of the `ListMemberPaymentsResponse` class, passing in the list of payments retrieved from the API. The response entity contains the list of payments.\n* `map(ResponseEntity::ok)`: This line maps the response entity to an HTTP 200 status code (OK), indicating that the list of payments was successfully retrieved.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This line provides a default response if the previous mapping fails, indicating that the house member with the given ID could not be found. The response entity contains a 404 status code (Not Found).","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `List Member Payments Response` containing the member's payments.\n\n* `ResponseEntity`: This is the primary output of the function, representing a response entity with an `ok` status and a `ListMemberPaymentsResponse` body containing the list of member payments.\n* `ListMemberPaymentsResponse`: This class represents the response body of the function, which contains a list of `MemberPayment` objects. Each `MemberPayment` object in the list represents a payment made by a house member.\n* `payments()`: This method returns a list of `MemberPayment` objects, which are the payments made by the house members.\n* `memberId`: This is the parameter passed to the function, representing the ID of the house member for whom the payments are being listed.","complex_type":true},"usage":{"language":"java","code":"@Service\npublic class PaymentApiImpl implements PaymentApi {\n  private final PaymentService paymentService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Autowired\n  public PaymentApiImpl(\n      PaymentService paymentService,\n      SchedulePaymentApiMapper schedulePaymentApiMapper) {\n    this.paymentService = paymentService;\n    this.schedulePaymentApiMapper = schedulePaymentApiMapper;\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n}\n","description":"\nThe above example shows how the listAllMemberPayments method would be used in a Spring Boot application with dependencies on `PaymentService` and `SchedulePaymentApiMapper`. The method takes an input of type `String`, which is the `memberId`, and returns an output of type `ResponseEntity<ListMemberPaymentsResponse>`. This response entity contains the list of payments for the given member, or a 404 not found response if no payment exists."},"name":"listAllMemberPayments","code":"@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":101,"insert":101,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"4289a682-16ce-b6a9-dc42-404e33b1ab96","ancestors":["355737a9-ecc4-489a-3647-ae30b464a7ed"],"type":"function","description":"retrieves a list of payments scheduled by an admin with a given ID, checks if the admin is in the community, and returns the list of payments in a REST API response.","params":[{"name":"communityId","type_name":"String","description":"community for which the scheduled payments are being listed, and is used to filter the payments returned in the response.\n\n* `communityId`: This is an String property that represents the community ID for which the payments are being listed.","complex_type":true},{"name":"adminId","type_name":"String","description":"ID of the admin who is authorized to view and manage payments within a specific community, and it is used to filter the list of payments returned in the response.\n\n* `communityId`: The ID of the community that the admin belongs to.\n* `adminId`: The ID of the admin who is requesting the list of scheduled payments.\n* `pageable`: A Pageable object used to paginate the results.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"page number and size of the payment list that the admin wants to see, allowing the function to paginate the list of payments accordingly.\n\n* `communityId`: The ID of the community for which the payments are to be listed.\n* `adminId`: The ID of the admin for whom the payments are to be listed.\n* `isAdminInGivenCommunity`: A boolean indicating whether the admin with the given ID is present in the specified community.\n* `paymentService`: An instance of a payment service used to retrieve the payments scheduled by the admin.\n* `pageable`: A `Pageable` object representing the pagination information for the payments.","complex_type":true}],"returns":{"type_name":"ListPayment","description":"a `ResponseEntity` with a list of `AdminPayment` objects and a `PageInfo` object.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the given admin and community.\n* `pageInfo`: Contains information about the page of payments, including the total number of payments and the current page number.\n\nThe function returns a `ResponseEntity` object with the list of scheduled payments in the `body` field, and a `StatusCode` indicating whether the request was successful or not in the `status` field.","complex_type":true},"usage":{"language":"java","code":"@Test\nvoid should_return_payments_scheduled_by_admin() {\n  // given\n  final String communityId = \"1\";\n  final String adminId = \"1\";\n  final Pageable pageable = PageRequest.of(0, 10);\n\n  // when\n  final ResponseEntity<ListAdminPaymentsResponse> responseEntity =\n      paymentApiController.listAllAdminScheduledPayments(communityId, adminId, pageable);\n\n  // then\n  assertThat(responseEntity).isNotNull();\n}\n","description":"\nIn this example we are testing that the method `listAllAdminScheduledPayments` returns a valid response entity when it is called with a valid community ID and an admin ID. We are not providing any input for the pageable parameter, so we can assume it's using the default values provided by Spring Data.\n\nTo test the happy path of this method, we need to make sure that the method returns a response entity with a status code of `HttpStatus.OK` and a body containing the list of payments scheduled by the admin for the community. We can use the mocking framework provided by Spring Boot to verify if the method is being called with the correct parameters and return an appropriate response entity."},"name":"listAllAdminScheduledPayments","code":"@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2},"item_type":"method","length":22},{"id":"d6588c32-2da7-3389-4141-9ad3e1f707a8","ancestors":["355737a9-ecc4-489a-3647-ae30b464a7ed"],"type":"function","description":"checks if a user is an administrator in a specific community by retrieving the community details and admins, then filtering the admins based on the user ID, and finally returning whether the user is an admin or not.","params":[{"name":"communityId","type_name":"String","description":"ID of a community that is being checked for an admin with the provided `adminId`.\n\n* `communityId`: A string that represents the ID of a community. This property is used to identify the community in question.\n\nThe function first retrieves the details of the community with the given ID using `communityService.getCommunityDetailsByIdWithAdmins()`.\n\nNext, it maps the admins of the community to a stream of Boolean values using `map(Community::getAdmins)`. This is done to filter out any non-admin users from the community.\n\nFinally, the function checks if there are any admin users in the community with the given ID and user ID using `map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId))).orElseThrow()`. If no such admin is found, a `RuntimeException` is thrown.","complex_type":true},{"name":"adminId","type_name":"String","description":"12-digit unique identifier of an administrator for a specific community.\n\n* `adminId`: A string representing the ID of an administrator in the community.\n* `getUserId()`: Returns the user ID of the administrator.","complex_type":true}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the specified admin is an administrator of the given community.\n\n* The function returns a `Boolean` value indicating whether an admin with the given `adminId` exists in the specified `communityId`.\n* The function first retrieves the community details along with its admins using the `communityService.getCommunityDetailsByIdWithAdmins()` method.\n* It then maps the admins to a stream of admins, using the `map()` method.\n* The stream is then filtered using the `anyMatch()` method to check if any admin with the given `adminId` exists in the community.\n* If no admin is found, the function throws a `RuntimeException`.\n\nIn summary, the function returns `True` if an admin with the given `adminId` exists in the specified `communityId`, and `False` otherwise.","complex_type":true},"usage":{"language":"java","code":"public void myMethod() {\n    final String communityId = \"my_community_id\";\n    final String adminId = \"my_admin_id\";\n    \n    Boolean isAdminInCommunity = isAdminInGivenCommunity(communityId, adminId);\n    if (isAdminInCommunity) {\n        // do something\n    } else {\n        // do something else\n    }\n}\n","description":"\nExplanation:\nThe method takes two parameters, communityId and adminId. It first uses the communityService's getCommunityDetailsByIdWithAdmins method to retrieve the Community object with the given communityId. If the retrieved Community object is null, it throws a RuntimeException with a message \"Community with given id not exists: [communityId]\".\n\nThe next line of code checks if the retrieved Community object has an admins field and if the adminId parameter matches any User object's userId field within that list. If there is a match, it returns true. Otherwise, it returns false.\n\nFinally, the method uses this return value to check if the Boolean isAdminInCommunity is true or false. If it is true, it does something in the if block. If it is false, it does something else in the else block."},"name":"isAdminInGivenCommunity","code":"private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }","location":{"start":137,"insert":137,"offset":" ","indent":2},"item_type":"method","length":7}]}}}
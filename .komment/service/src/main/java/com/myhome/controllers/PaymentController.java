{"name":"PaymentController.java","path":"service/src/main/java/com/myhome/controllers/PaymentController.java","content":{"structured":{"description":"A `PaymentController` that provides endpoints for managing payments in a community. The controller uses Spring Data and Lombok to interact with the PaymentService and CommunityService, respectively. The code processes requests to schedule a payment, list all member payments, and list all admin scheduled payments. Additionally, it checks if an admin is present in a given community before listing all member payments.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a17df46c-d316-2595-8842-8549882991b5","ancestors":[],"type":"function","description":"in this Java code provides RESTful API endpoints for handling payment-related requests. It handles requests to create, read, update, and delete payments, as well as listing all payments for a particular member or admin. The controller uses dependency injection to inject required services, such as the PaymentService, CommunityService, and SchedulePaymentApiMapper, which are used to handle payment-related tasks. The controller also includes validation and error handling mechanisms to ensure that requests are processed correctly and errors are handled appropriately.","name":"PaymentController","code":"@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}","location":{"start":51,"insert":51,"offset":" ","indent":0,"comment":{"start":47,"end":50}},"item_type":"class","length":94},{"id":"a9f74153-08cb-c383-7241-ab8280fa191d","ancestors":["a17df46c-d316-2595-8842-8549882991b5"],"type":"function","description":"receives a `SchedulePaymentRequest` from an admin and checks if the user is an admin of the community house. If so, it enriches the request with additional data, schedules the payment through the `schedulePayment` API, and returns the response.","params":[{"name":"request","type_name":"SchedulePaymentRequest","description":"SchedulePaymentRequest object containing the information necessary to schedule a payment for a community house member.\n\n* `request.getMemberId()`: The ID of the house member for whom payment is being scheduled.\n* `request.getAdminId()`: The ID of the community admin who is scheduling the payment.","complex_type":true}],"returns":{"type_name":"SchedulePaymentResponse","description":"a `SchedulePaymentResponse` object representing the scheduled payment details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a request. The status code of the response is set to `HttpStatus.CREATED`, indicating that the payment has been scheduled successfully.\n* `body`: This property contains the `SchedulePaymentResponse` object, which provides information about the scheduled payment.\n* `SchedulePaymentResponse`: This class represents the response to the `schedulePayment` function, providing details about the scheduled payment, such as the payment date, amount, and status.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate PaymentService paymentService;\n\n@Test\npublic void shouldSchedulePaymentWithValidRequest() {\n  SchedulePaymentRequest request = new SchedulePaymentRequest();\n  request.setMemberId(\"member-id\");\n  request.setAdminId(\"admin-id\");\n  request.setCommunityId(\"community-id\");\n  request.setAmount(BigDecimal.TEN);\n\n  User admin = new User();\n  admin.setUserId(\"admin-id\");\n\n  HouseMember houseMember = new HouseMember();\n  houseMember.setHouseMemberId(\"house-member-id\");\n  houseMember.setCommunityHouse(new CommunityHouse());\n  houseMember.getCommunityHouse().setCommunityId(\"community-id\");\n\n  EnrichedSchedulePaymentRequest enrichedRequest = new EnrichedSchedulePaymentRequest();\n  enrichedRequest.setMemberId(\"member-id\");\n  enrichedRequest.setAdmin(admin);\n  enrichedRequest.setHouseMember(houseMember);\n  enrichedRequest.setAmount(request.getAmount());\n\n  PaymentDto paymentDto = new PaymentDto();\n  paymentDto.setPaymentId(\"payment-id\");\n  paymentDto.setCommunityHouseId(\"community-house-id\");\n  paymentDto.setAdminId(\"admin-id\");\n  paymentDto.setMemberId(\"member-id\");\n  paymentDto.setAmount(request.getAmount());\n\n  Payment processedPayment = new Payment();\n  processedPayment.setPaymentId(\"payment-id\");\n  processedPayment.setCommunityHouseId(\"community-house-id\");\n  processedPayment.setAdminId(\"admin-id\");\n  processedPayment.setMemberId(\"member-id\");\n  processedPayment.setAmount(request.getAmount());\n\n  given(paymentService.schedulePayment(any())).willReturn(processedPayment);\n  given(communityService.findCommunityAdminById(eq(request.getAdminId()))).willReturn(admin);\n  given(houseMemberService.getHouseMember(eq(\"member-id\"))).willReturn(houseMember);\n  given(paymentService.getHouseMember(eq(\"member-id\")))\n      .willReturn(Optional.of(houseMember));\n\n  // Call the method schedulePayment with request as input and verify that it returns a ResponseEntity<SchedulePaymentResponse> object\n  // containing the payment details of the processed payment\n  ResponseEntity<SchedulePaymentResponse> response = paymentService.schedulePayment(request);\n  assertThat(response).isNotNull();\n  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n  SchedulePaymentResponse schedulePaymentResponse = response.getBody();\n  assertThat(schedulePaymentResponse).isNotNull();\n  assertThat(schedulePaymentResponse.getAmount()).isEqualTo(request.getAmount());\n  assertThat(schedulePaymentResponse.getAdminId()).isEqualTo(admin.getUserId());\n  assertThat(schedulePaymentResponse.getMemberId())\n      .isEqualTo(houseMember.getHouseMemberId());\n}\n","description":""},"name":"schedulePayment","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":25},{"id":"17bf2b1c-f7e3-439b-e347-ce0ce456dcee","ancestors":["a17df46c-d316-2595-8842-8549882991b5"],"type":"function","description":"checks if a given User is an administrator of a CommunityHouse by checking if their ID exists in the community House's admin list.","params":[{"name":"communityHouse","type_name":"CommunityHouse","description":"Community House object that is being checked for admin status by the `isUserAdminOfCommunityHouse()` function.\n\n* `communityHouse`: This is an instance of the `CommunityHouse` class, which likely has various attributes or properties that describe its characteristics.\n* `getCommunity()`: This method returns a reference to the `Community` object associated with the `communityHouse` instance.\n* `getAdmins()`: This method returns a list of `User` objects representing the administrators of the community.\n\nThe function then checks if the specified `admin` is present in the list of admins returned by `getAdmins()`. If it is, the function returns `true`, indicating that the user is an administrator of the community; otherwise, it returns `false`.","complex_type":true},{"name":"admin","type_name":"User","description":"User object that is being checked if they are an administrator of the CommunityHouse.\n\n* `CommunityHouse communityHouse`: This is an instance of the `CommunityHouse` class, which represents a community house.\n* `getAdmins()`: This method returns a list of `User` objects that represent the admins of the community house.\n* `contains()`: This method checks if the given `User` object is present in the list of admins returned by `getAdmins()`.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the specified user is an administrator of the community house.","complex_type":false},"usage":{"language":"java","code":"// Given\nCommunityHouse communityHouse = ...;\nUser admin = ...;\n\n// When\nboolean isAdminInGivenCommunity = isUserAdminOfCommunityHouse(communityHouse, admin);\n\n// Then\nassertTrue(isAdminInGivenCommunity);\n","description":"\nThis example provides the input arguments to method `isUserAdminOfCommunityHouse`, and asserts that the expected output of calling the method with those inputs is true. The input arguments are the only ones that need to be provided in this example, because they are the only ones that are required to call the method.\n\nThe code in this example does not create a unit test for the method, nor does it provide any incorrect inputs for the method. The method being tested is `isUserAdminOfCommunityHouse`, and its input arguments are the community house and admin user objects. This example reasonably tests the method by providing valid input arguments that the method can use to make a decision.\n\nThe explanation for this code is not provided, because it is assumed that the reader already understands how to write unit tests. The code itself is sufficient to demonstrate how the method would be used in a test, and the only thing that needs explaining is what inputs are required to call the method with expected output true."},"name":"isUserAdminOfCommunityHouse","code":"private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"baaf6bd4-1653-df8f-9648-706cd2534e88","ancestors":["a17df46c-d316-2595-8842-8549882991b5"],"type":"function","description":"retrieves payment details for a given payment ID from the payment service and maps them to a `SchedulePaymentResponse` object using the `paymentToSchedulePaymentResponse` mapper. It then returns a `ResponseEntity` with an `OK` status code or an empty entity if the payment ID is not found.","params":[{"name":"paymentId","type_name":"String","description":"identifier of the payment for which details are to be retrieved.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the payment details if the payment ID exists, or a `ResponseEntity.notFound()` object otherwise.\n\n* `paymentId`: The unique identifier for the payment being retrieved.\n* `paymentToSchedulePaymentResponse`: A mapping from the payment details to a `SchedulePaymentResponse` object, which contains information about the scheduled payment.","complex_type":true},"usage":{"language":"java","code":"@Test\nvoid listPaymentDetails() {\n  String paymentId = \"1234\"; // Example input, change to any string value\n  ResponseEntity<SchedulePaymentResponse> response = schedulePaymentApiController.listPaymentDetails(paymentId);\n  \n  assertThat(response).isNotNull();\n}\n","description":"\nExplanation:\nThe test method listPaymentDetails tests the listPaymentDetails method in SchedulePaymentApiController. The method takes a string paymentId as input, and returns a ResponseEntity object that contains either a SchedulePaymentResponse object or a null value. In this example, any String value is assigned to paymentId which would be used in the test.\n\nThe test code uses assertThat to check if the response returned from listPaymentDetails is not null. This checks if the method executed correctly and did not return an error.\n\nNote: The input string \"1234\" is just a dummy value for this example, it should be replaced with the actual paymentId value used in the test."},"name":"listPaymentDetails","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":91,"insert":91,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"d6589e79-d281-8998-de49-d7a78694c1ad","ancestors":["a17df46c-d316-2595-8842-8549882991b5"],"type":"function","description":"retrieves all payments for a specific member ID using multiple calls to other functions, transforms the response into a list of `MemberPaymentSet`, and returns it as a `ResponseEntity`.","params":[{"name":"memberId","type_name":"String","description":"House member for whom all payments should be listed.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing a `List Member Payments Response` with the list of payments for the specified member.\n\n* `ResponseEntity<ListMemberPaymentsResponse>`: This is the generic type of the response entity, which represents a list of member payments.\n* `List Member Payments Response`: This is a nested class within `ListMemberPaymentsResponse`, which contains the list of member payments.\n* `payments()`: This method returns a list of `Payment` objects, which represent the member payments.\n* `ok()`: This method builds an `ResponseEntity` with a status code of 200 (OK) and a body containing the list of member payments.\n* `notFound()`: This method builds an `ResponseEntity` with a status code of 404 (Not Found) and a body containing an error message indicating that no member payments could be found.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<ListMemberPaymentsResponse> response = controller.listAllMemberPayments(memberId);\n","description":"\nWhere `memberId` is a valid member's id. The method `getHouseMember()` returns an optional containing the house member with the given `memberId`, and if it does not exist, returns an empty optional. The method `getPaymentsByMember()` returns a set of payments made by the house member with the given `memberId`. Finally, the code maps the returned set of payments to a list of REST API payment objects using the schedule payment API mapper and returns it in a response entity.\n\nThe example code assumes that the `paymentService` object is valid and has been properly initialized, and that `memberId` is a non-null string representing a valid house member's id."},"name":"listAllMemberPayments","code":"@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":101,"insert":101,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"27967589-6bcf-3d9f-ba45-10e824f3283b","ancestors":["a17df46c-d316-2595-8842-8549882991b5"],"type":"function","description":"receives a community ID, an admin ID, and a pageable parameter, and lists all payments scheduled by the admin with that ID within the given community.","params":[{"name":"communityId","type_name":"String","description":"community for which the admin is searching scheduled payments.","complex_type":false},{"name":"adminId","type_name":"String","description":"ID of the admin for whom scheduled payments are to be listed.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"pagination information for the payments to be listed, allowing the function to retrieve only the requested portion of the list.\n\n* `communityId`: A string representing the ID of the community for which the payments are being listed.\n* `adminId`: A string representing the ID of the admin for whom the payments are being listed.\n* `Pageable`: An object representing a page of payments, with properties such as `pageNumber`, `pageSize`, and `totalElements`.","complex_type":true}],"returns":{"type_name":"ListAdminPayment","description":"a `ResponseEntity` object containing a `ListAdminPaymentsResponse` object with scheduled payments for the provided admin ID.\n\n* `payments`: A list of `AdminPayment` objects, representing the scheduled payments for the admin with the given ID.\n* `pageInfo`: Represents the pagination information for the payments, including the total number of payments and the current page being displayed.\n* `response`: The response entity with the list of payments and pagination information.","complex_type":true},"usage":{"language":"java","code":"List<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\nPageInfo pageInfo = PageInfo.of(pageable, paymentsForAdmin);\nList<AdminPayment> adminPayments = schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(new HashSet<>(payments));\nListAdminPaymentsResponse response = new ListAdminPaymentsResponse().payments(adminPayments).pageInfo(pageInfo);\nreturn ResponseEntity.ok().body(response);\n","description":"\nThe code creates a list of payments for the admin with ID \"adminId\" using the paymentService's getPaymentsByAdmin method and then gets the PageInfo using the static method of PageInfo.of. The next line converts the list to a set using the new HashSet<>(payments) constructor, which is necessary to prevent ConcurrentModificationException when iterating over the list. The last line creates an instance of ListAdminPaymentsResponse and sets its payments and pageInfo fields to the appropriate values. Finally, it returns ResponseEntity.ok() with a body that contains the response object."},"name":"listAllAdminScheduledPayments","code":"@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22},{"id":"9742cfb4-45bc-f9a3-364e-786a17fd343f","ancestors":["a17df46c-d316-2595-8842-8549882991b5"],"type":"function","description":"retrieves the details of a community and its admins, filters the list of admins based on the provided admin ID, and returns a boolean value indicating whether the specified admin is an admin in the given community.","params":[{"name":"communityId","type_name":"String","description":"ID of the community for which admin status is to be checked.","complex_type":false},{"name":"adminId","type_name":"String","description":"ID of the administrator being checked for membership in the specified community.","complex_type":false}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the specified admin is an administrator of the given community.\n\n* The function returns a `Boolean` value indicating whether an admin with the given `adminId` exists in the specified `communityId`.\n* If there is no admin with the given `adminId` in the community, the function will throw a `RuntimeException`.\n* The function first retrieves the details of the community with the given `communityId`, using the `communityService.getCommunityDetailsByIdWithAdmins()` method.\n* It then maps the admins of the community to a stream of admins, using the `map()` method.\n* Finally, it maps the stream of admins to a boolean value indicating whether an admin with the given `adminId` exists in the community, using the `stream().anyMatch()` method. If no such admin exists, the function returns `false`. Otherwise, it returns `true`.","complex_type":true},"usage":{"language":"java","code":"private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n}\n","description":"\nThis method takes in two input parameters: 'communityId' of type String and 'adminId' of type String. This method first uses the getCommunityDetailsByIdWithAdmins() method provided by communityService to fetch a community object with its admins populated. Next, it extracts the admins from this object using map(). Finally, it filters these admins by searching for one whose user id matches the adminId input parameter and returns true if any of them match. If no such match is found, an exception will be thrown."},"name":"isAdminInGivenCommunity","code":"private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }","location":{"start":137,"insert":137,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}
{"name":"AuthenticationController.java","path":"service/src/main/java/com/myhome/controllers/AuthenticationController.java","content":{"structured":{"description":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. The class contains a single method, `login`, which takes a `LoginRequest` object as input and returns a `ResponseEntity` object with the user ID and JWT token of the logged-in user. The `createLoginHeaders` method is used to generate HTTP headers with the user ID and JWT token.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"1c5cde93-24e9-cc89-cb44-49940742fc47","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationController","code":"@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}","location":{"start":13,"insert":13,"offset":" ","indent":0},"item_type":"class","length":21},{"id":"cfe1266d-b38a-ef82-994d-17b7f805df82","ancestors":["1c5cde93-24e9-cc89-cb44-49940742fc47"],"type":"function","description":"handles login requests by logging in the user and returning an `OK` response with headers containing authentication data.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"логин request sent by the user, containing the necessary information for authentication.\n\n* `@Valid`: This annotation indicates that the `loginRequest` object must be validated using the `@Validation` annotation.\n* `AuthenticationData`: This represents the data required for authentication, which is generated by the `authenticationService` method `login`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing an `OK` status and headers generated based on the authentication data.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a RESTful API request.\n* `ok()`: This method returns a `ResponseEntity` with a status code of 200 (OK), indicating that the login request was successful.\n* `headers(createLoginHeaders(authenticationData))`: This method sets the headers of the response, which contain information about the authentication data. The `createLoginHeaders` method is responsible for creating these headers.","complex_type":true},"usage":{"language":"java","code":"// Input: LoginRequest loginRequest = new LoginRequest(\"username\", \"password\");\nResponseEntity<Void> responseEntity = authenticationController.login(loginRequest);\nif (responseEntity.getStatusCode() == HttpStatus.OK) {\n    // Successful login, retrieve the user ID and token from the headers\n    String userId = responseEntity.getHeaders().getFirst(\"userId\");\n    String token = responseEntity.getHeaders().getFirst(\"token\");\n} else {\n    // Login failed, handle the error\n}\n","description":""},"name":"login","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }","location":{"start":19,"insert":19,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"e0bd0584-c10d-a086-5547-8b7ee78cc743","ancestors":["1c5cde93-24e9-cc89-cb44-49940742fc47"],"type":"function","description":"creates an HTTP headers object containing user ID and JWT token for login purposes based on input `AuthenticationData`.","params":[{"name":"authenticationData","type_name":"AuthenticationData","description":"data required for logging into an application, providing the user ID and JWT token for authentication.\n\n1. `getUserId()` - Retrieves the user ID from the authentication data.\n2. `getJwtToken()` - Retrieves the JWT token from the authentication data.","complex_type":true}],"returns":{"type_name":"HttpHeaders","description":"a set of HTTP headers containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class from the Java `java.net` package, which represents a set of HTTP headers.\n* `add()` methods: These methods are used to add new header elements to the `HttpHeaders` object. In this function, two such methods are called - `add(\"userId\")` and `add(\"token\")`. The values of these method calls are `authenticationData.getUserId()` and `authenticationData.getJwtToken()`, respectively.\n* `get()` method: This method is used to retrieve the value of a specific header element. In this function, no such method call is made.","complex_type":true},"usage":{"language":"java","code":"private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n","description":"\nIn this example, the method is called with a single parameter, 'authenticationData', which is of type AuthenticationData. The method returns an HttpHeaders object that contains two headers: 'userId' and 'token'. The values for these headers are obtained by calling the getter methods on the authentication data object, specifically getUserId() and getJwtToken().\nThe returned HttpHeaders object can then be used to send a response to the client. For example:\n"},"name":"createLoginHeaders","code":"private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }","location":{"start":27,"insert":27,"offset":" ","indent":2},"item_type":"method","length":6}]}}}
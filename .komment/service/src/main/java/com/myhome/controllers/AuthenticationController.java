{"name":"AuthenticationController.java","path":"service/src/main/java/com/myhome/controllers/AuthenticationController.java","content":{"structured":{"description":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. It has a single method, `login`, which takes a `LoginRequest` object as input and returns a `ResponseEntity` object with the user ID and JWT token in the HTTP headers. The `login` method calls the `login` method of the `AuthenticationService` class, which performs authentication using the provided login request. The `createLoginHeaders` method is used to generate the HTTP headers containing the user ID and JWT token.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a4ba074f-5fe3-5f94-c84a-c3960c9bcfb5","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationController","code":"@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}","location":{"start":13,"insert":13,"offset":" ","indent":0},"item_type":"class","length":21},{"id":"1c427b7e-27a3-69be-ef45-66bb9410e4a1","ancestors":["a4ba074f-5fe3-5f94-c84a-c3960c9bcfb5"],"type":"function","description":"authenticates a user using the `AuthenticationService`, creates headers with login information, and returns a `ResponseEntity` object with an OK status and built headers.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"login request, which includes the user credentials and other relevant information for authentication.\n\n* `LoginRequest`: An object that contains login credentials for authentication purposes.\n* `authenticationService`: A service responsible for authenticating user requests.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with an `OK` status and headers generated based on the `AuthenticationData`.\n\n* The `ResponseEntity` is an instance of `ResponseEntity` class, which contains the headers and body of the response.\n* The `headers` field is an instance of `HttpHeaders` class, which contains metadata about the response such as status code, caching, and content type.\n* The `build()` method is used to create a new `ResponseEntity` instance with the provided headers.\n* The authenticationData field contains the result of the login operation, including the authenticated user's details.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n}\n","description":""},"name":"login","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }","location":{"start":19,"insert":19,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"bd6e10c5-c952-3593-6c41-0a9081a922c3","ancestors":["a4ba074f-5fe3-5f94-c84a-c3960c9bcfb5"],"type":"function","description":"creates an HTTP headers object containing user ID and JWT token for login authentication based on provided AuthenticationData.","params":[{"name":"authenticationData","type_name":"AuthenticationData","description":"user's credentials, providing the `User ID` and `JWT Token` necessary for authentication.\n\n* `userId`: an integer representing the user ID associated with the JWT token.\n* `token`: a string denoting the JWT token issued by the authentication service.","complex_type":true}],"returns":{"type_name":"HttpHeaders","description":"an HTTP header object containing the user ID and JWT token of the authenticated user.\n\n* `httpHeaders`: This is an instance of `HttpHeaders`, which represents the HTTP headers for the login request.\n* `userId`: The value of this property is a String representing the user ID of the authenticated user.\n* `token`: The value of this property is a String representing the JWT token obtained through authentication.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        AuthenticationData authenticationData = new AuthenticationData(\"12345\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\");\n        HttpHeaders httpHeaders = createLoginHeaders(authenticationData);\n        System.out.println(httpHeaders); // Output: {userId=12345, token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c}\n    }\n}\n","description":""},"name":"createLoginHeaders","code":"private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }","location":{"start":27,"insert":27,"offset":" ","indent":2},"item_type":"method","length":6}]}}}
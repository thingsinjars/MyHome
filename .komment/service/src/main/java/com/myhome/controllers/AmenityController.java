{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"An API for managing amenities in a community, including creating, listing, updating, and deleting amenities. The API uses Spring Webflux and Lombok to provide a simple and efficient interface for interacting with the amenity data. The code includes methods for retrieving individual amenities or listing all amenities in a community, as well as methods for adding, updating, and deleting amenities.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"4397cfa5-f4c0-ab9a-6643-80e24c16bb52","ancestors":[],"type":"function","description":"TODO","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0},"item_type":"class","length":59},{"id":"53160f3d-3b6c-c0b1-9c47-f9c13f1d707c","ancestors":["4397cfa5-f4c0-ab9a-6643-80e24c16bb52"],"type":"function","description":"retrieves amenity details from the database through the `amenitySDJpaService` and maps them to `AmenityDetailsResponse` using `amenityApiMapper`. It returns a `ResponseEntity` with status code `OK` or an empty response entity if the amenity ID does not exist.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity being requested, which is used to retrieve the corresponding details from the database.\n\n* `amenityId`: A String variable representing the amenity ID to be queried.\n\nThe `amenitySDJpaService.getAmenityDetails(amenityId)` method is called with the `amenityId` parameter, which is used to retrieve the details of the specified amenity from the database. The `map()` methods are then applied to transform the retrieved data into a `GetAmenityDetailsResponse` object using the `amenityApiMapper`. If the amenity is found in the database, the `map()` method returns an instance of `ResponseEntity` with a status code of `OK` (200). Otherwise, it returns an instance of `ResponseEntity` with a status code of `NOT_FOUND` (404).","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing the amenity details response.\n\n* `ResponseEntity<GetAmenityDetailsResponse>`: This is the generic type of the output, indicating that it is an entity with a response body of type `GetAmenityDetailsResponse`.\n* `getAmenityDetails(String amenityId)`: This is the method signature, which takes an `amenityId` parameter and returns an `ResponseEntity` object.\n* `.map(amenitySDJpaService::getAmenityDetails)`: This line calls the `getAmenityDetails()` method of the `amenitySDJpaService` object, passing in the `amenityId` parameter as a argument. This method is used to retrieve the details of the amenity with the given `id`.\n* `.map(amenityApiMapper::amenityToAmenityDetailsResponse)`: This line calls the `amenityToAmenityDetailsResponse()` method of the `amenityApiMapper` object, passing in the result of the previous call as a parameter. This method is used to map the retrieved amenity details to a response body of type `GetAmenityDetailsResponse`.\n* `.map(ResponseEntity::ok)`: This line calls the `ok()` method of the `ResponseEntity` object, which returns a new `ResponseEntity` object with a status code of 200 (OK).\n* `orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build())`: This line provides an alternative to the previous mapping, which is to return a `ResponseEntity` object with a status code of 404 (NOT FOUND) if the amenity with the given `id` cannot be found.\n\nIn summary, the output of the `getAmenityDetails` function is a `ResponseEntity` object that contains the details of the amenity with the given `id`, and has a status code of 200 (OK) if the amenity exists, or a status code of 404 (NOT FOUND) if the amenity cannot be found.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<GetAmenityDetailsResponse> response = amenityController.getAmenityDetails(\"amenityId\");\n","description":"\nHere, the argument `amenityId` is a string representing the ID of an existing amenity. The method returns a response entity that contains the details of the requested amenity if it exists. If it does not exist, the response entity will contain a 404 status code indicating that the resource was not found."},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"43a8ccc5-5c28-ca89-334b-f0cbb4e4a902","ancestors":["4397cfa5-f4c0-ab9a-6643-80e24c16bb52"],"type":"function","description":"retrieves a set of amenities from the database using `amenitySDJpaService`, maps them to `GetAmenityDetailsResponse` objects using `amenityApiMapper`, and returns an `Ok` response entity with the transformed set of `GetAmenityDetailsResponse` objects.","params":[{"name":"communityId","type_name":"String","description":"unique identifier for a community, which is used to retrieve the amenities associated with that community from the database.\n\n* `communityId`: This is a string representing the unique identifier for a community. It is passed as a path variable in the HTTP request.","complex_type":true}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing the amenities for a given community ID.\n\n* `ResponseEntity`: This is the class that represents a successful response to a HTTP request, with an `OK` status code.\n* `Set<GetAmenityDetailsResponse>`: This set contains the list of amenities in detail, which were obtained from the database using the `listAllAmenities` method.\n* `amenitySDJpaService`: This is a Java Persistence API (JPA) service that provides methods for interacting with the amenities data stored in the database.\n* `amenityApiMapper`: This is an API mapper class that maps the amenities retrieved from the database to the `GetAmenityDetailsResponse` set.\n\nIn summary, the `listAllAmenities` function returns a successful response with a list of `GetAmenityDetailsResponse` objects containing detailed information about each amenity in the community.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(String communityId) {\n  Set<Amenity> amenities = this.amenitySDJpaService.listAllAmenities(communityId);\n  Set<GetAmenityDetailsResponse> response = this.amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n  return ResponseEntity.ok(response);\n}\n","description":"\nThis method takes in a communityId as input and returns a set of GetAmenityDetailsResponse objects that contain information about the amenities associated with the specified community. The method first retrieves a list of all amenities for the specified community using the amenitySDJpaService, then maps each Amenity object to a GetAmenityDetailsResponse object using the amenityApiMapper. Finally, it returns a ResponseEntity containing the set of GetAmenityDetailsResponse objects.\n\nNote that this is just an example and may not be a complete or accurate representation of how the method would actually be used in practice."},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"366d4ac8-f443-ba87-6646-f0dbd5da59fd","ancestors":["4397cfa5-f4c0-ab9a-6643-80e24c16bb52"],"type":"function","description":"adds amenities to a community using the `amenitySDJpaService`. It creates an `AddAmenityResponse` object with the added amenities and returns it as a `ResponseEntity` with a status of `ok` or `notFound` depending on the result of the operation.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities will be added.\n\n* `communityId`: This is a String variable that represents the unique identifier of a community. It is used to identify the community in which amenities will be added.\n* `@PathVariable`: This annotation indicates that the value of `communityId` is passed as a path variable from the URL.","complex_type":true},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to the community, which is used by the `amenitySDJpaService` to create the new amenities in the database.\n\n* `communityId`: a string representing the ID of the community to which amenities will be added.\n* `request.getAmenities()`: an array of objects containing the amenities to be added to the community. Each object in the array has properties such as `name`, `description`, and `type`.","complex_type":true}],"returns":{"type_name":"AddAmenityResponse","description":"a `ResponseEntity` object with a status of `ok` and an `AddAmenityResponse` object containing the created amenities.\n\n* `ResponseEntity<AddAmenityResponse>`: This is an entity that contains a response object of type `AddAmenityResponse`.\n* `AddAmenityResponse`: This class represents the response to the add amenities request. It has a single attribute `amenities`, which is a list of amenities added to the community.\n* `map(Function<AddAmenityResponse, ResponseEntity<AddAmenityResponse>> mappingFunction)`: This line uses the `mappingFunction` to map the response object to an instance of `ResponseEntity`. The `mappingFunction` takes the `AddAmenityResponse` object as input and returns a `ResponseEntity` object with a status code of `ok` or `notFound`, depending on whether the amenities were added successfully or not.\n* `orElse(Function<Throwable, ResponseEntity<AddAmenityResponse>> fallbackMappingFunction)`: This line provides a fallback mapping function in case the original mapping function fails. The `fallbackMappingFunction` takes a `Throwable` object as input and returns a `ResponseEntity` object with a status code of `internalServerError`.\n\nOverall, the output of the `addAmenityToCommunity` function is a response entity that contains the result of adding amenities to a community. The response entity has a single attribute, `amenities`, which is a list of added amenities.","complex_type":true},"usage":{"language":"java","code":"@Test\n  void testAddAmenityToCommunity() {\n    AddAmenityRequest request = new AddAmenityRequest();\n    request.setAmenities(Arrays.asList(\"Wifi\", \"Swimming Pool\"));\n    String communityId = \"12345\";\n    \n    ResponseEntity<AddAmenityResponse> response =\n      amenitySDJpaService.addAmenityToCommunity(communityId, request);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertNotNull(response.getBody().getAmenities());\n  }\n","description":""},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"be73f0ea-bf0d-b6b4-5b49-e1253692e031","ancestors":["4397cfa5-f4c0-ab9a-6643-80e24c16bb52"],"type":"function","description":"deletes an amenity from the database based on its ID, returning a HTTP status code indicating the result of the operation.","params":[{"name":"amenityId","type_name":"String","description":"id of the amenity to be deleted.\n\n* `String amenityId`: This represents the unique identifier for an amenity in the system. It is a required parameter passed through `@PathVariable`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the requested resource has been deleted successfully.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the requested amenity could not be found in the database, possibly due to deletion errors or other issues.","complex_type":true},"usage":{"language":"java","code":"public void deleteExample(){\n    String amenityId = \"12345\";\n    ResponseEntity response = deleteAmenity(amenityId);\n}\n","description":""},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"1633470f-377c-0ba5-c843-98f73087cd78","ancestors":["4397cfa5-f4c0-ab9a-6643-80e24c16bb52"],"type":"function","description":"updates an amenity by using the `amenityApiMapper` to convert the request body into a `AmenityDto` object, then passing it to the `amenitySDJpaService` to update the amenity. If the update is successful, a `NO_CONTENT` status code is returned, otherwise a `NOT_FOUND` status code is returned.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity to be updated in the system.\n\n* `amenityId`: The id of the amenity being updated.\n\nThe function updates the amenity using the `amenitySDJpaService`, and based on the update result, returns a response entity with a HTTP status code of NO_CONTENT or NOT_FOUND.","complex_type":true},{"name":"request","type_name":"UpdateAmenityRequest","description":"UpdateAmenityRequest object containing the details of the amenity to be updated, which is used by the method to update the corresponding amenity in the database.\n\n* `@Valid`: This annotation is used to indicate that the request body must be valid according to the specified schema.\n* `@RequestBody`: This annotation indicates that the request body should be deserialized and processed as a request entity.\n* `UpdateAmenityRequest`: This class represents the request body, which contains the details of the amenity to be updated.\n* `amenityId`: The ID of the amenity to be updated.\n* `request`: The complete request body containing all the necessary attributes for updating an amenity.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was updated successfully.\n\n* `isUpdated`: A boolean value indicating whether the amenity was successfully updated or not.\n* `HttpStatus`: The HTTP status code associated with the response, which can be either `NO_CONTENT` (204) or `NOT_FOUND` (404).","complex_type":true},"usage":{"language":"java","code":"// Example 1: Update an existing amenity with id \"amenity_1\"\nUpdateAmenityRequest request = new UpdateAmenityRequest();\nrequest.setName(\"New Amenity Name\");\nrequest.setDescription(\"New Amenity Description\");\nrequest.setType(AmenityType.FREE);\nrequest.setPrice(50);\namenityController.updateAmenity(\"amenity_1\", request);\n\n// Example 2: Update an existing amenity with id \"amenity_2\" and delete it\nUpdateAmenityRequest request = new UpdateAmenityRequest();\nrequest.setName(\"New Amenity Name\");\nrequest.setDescription(\"New Amenity Description\");\nrequest.setType(AmenityType.FREE);\nrequest.setPrice(50);\nrequest.setDeleted(true);\namenityController.updateAmenity(\"amenity_2\", request);\n","description":"\nIn Example 1, we create a new UpdateAmenityRequest object and set the name, description, type, and price to be updated for an existing amenity with id \"amenity_1\". We then use the updateAmenity method to update that amenity.\n\nIn Example 2, we do the same as in Example 1 but also set the deleted flag to true so that the amenity will be deleted after it is updated."},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":12}]}}}
{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"A REST controller class named `AmenityController` that implements the `AmenitiesApi` interface. The class includes methods for listing all amenities in a community, adding an amenity to a community, deleting an amenity, and updating an amenity. The class uses Spring Boot's dependency injection mechanism to inject dependencies such as `AmenityService` and `AmenityApiMapper`. The `AmenityService` is responsible for persisting amenities in a database, while the `AmenityApiMapper` maps between API models and domain models.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"f0296ed9-573b-eeba-f84d-8bacf2d5eb86","ancestors":[],"type":"function","description":"TODO","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0},"item_type":"class","length":59},{"id":"8d82f491-9a91-7e9f-754c-4704f65e8997","ancestors":["f0296ed9-573b-eeba-f84d-8bacf2d5eb86"],"type":"function","description":"retrieves amenity details for a given ID and maps the result to an `AmenityDetailsResponse` object using a mapper, returning an `ResponseEntity` with a status code of 200 if the amenity is found, or a status code of 404 if it's not.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity to retrieve details for.\n\n* `amenityId`: A String representing the unique identifier for an amenity.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"an `OkResponseEntity` containing the details of the amenity with the specified ID.\n\n* ` ResponseEntity<GetAmenityDetailsResponse>` is a utility class provided by Spring that represents a response entity with an optional body. In this case, the body is of type `GetAmenityDetailsResponse`.\n* `getAmenityDetails` method returns a `Flux` object representing the result of the database query. The `Flux` object emits objects of type `AmenityDetailsResponse`.\n* The `map` methods are used to transform the `Flux` object into a `Optional` object, which represents the presence or absence of a response entity. If the response is present, the `Optional` object is `ofType` `ResponseEntity`, and its `getBody` method returns the actual response entity. Otherwise, the `Optional` object is `empty`, indicating that no response was found.\n* The `orElse` method is used to provide an alternative response if the `Optional` object is empty. In this case, the alternative response is a `ResponseEntity` with a status code of `NOT_FOUND`.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":"\nThe example uses the amenitySDJpaService to obtain details about a specific amenity with the given id in the path variable. It then maps the obtained details to an AmenityDetailsResponse object using the amenityApiMapper and returns it as an ok response entity. If no details are found for the given id, then a not found status code is returned instead."},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"7e256537-c3bb-de81-aa4f-954b9ca2d3bd","ancestors":["f0296ed9-573b-eeba-f84d-8bacf2d5eb86"],"type":"function","description":"retrieves a list of amenities from the database using `amenitySDJpaService`, maps them to `GetAmenityDetailsResponse` objects through `amenityApiMapper`, and returns an `Ok` response entity with the mapped amenity details.","params":[{"name":"communityId","type_name":"String","description":"community for which the list of amenities is being retrieved.\n\n* `communityId`: A string representing the community ID used to retrieve amenities.\n* Type: `String`\n* Description: The unique identifier for a community.","complex_type":true}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing the details of all amenities for a given community.\n\n* `ResponseEntity`: This is the type of the returned response, which indicates that it is an entity containing a set of `GetAmenityDetailsResponse` objects.\n* `ok`: This is the status code of the response, indicating that it was successful.\n* `Set<GetAmenityDetailsResponse>`: This is the set of `GetAmenityDetailsResponse` objects contained in the response entity.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n","description":"\nIn this example, we are calling the method listAllAmenities with a communityId parameter of \"123\". The method will then use the amenitySDJpaService object to call the listAllAmenities() method and pass in the communityId. It will then return a ResponseEntity containing the set of Amenity objects that were returned by the listAllAmenities() method, which are then converted into GetAmenityDetailsResponse objects using the amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet() method and added to the response Set."},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"3f11b501-021c-89b5-1145-92b944877373","ancestors":["f0296ed9-573b-eeba-f84d-8bacf2d5eb86"],"type":"function","description":"creates amenities for a given community using the `amenitySDJpaService`, maps the created amenities to a `AddAmenityResponse`, and returns a `ResponseEntity` with a status of `ok` or `notFound` depending on the outcome.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities will be added.\n\n* `communityId`: A string representing the unique identifier of a community.\n* `@PathVariable`: An annotation used to inject the community ID from the URL path into the function.","complex_type":true},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to the community, which is used by the method to create the new amenities in the database.\n\n* `request.getAmenities()`: A list of amenity objects containing information about the amenities to be added to the community. Each amenity object has attributes such as `name`, `type`, and `description`.","complex_type":true}],"returns":{"type_name":"AddAmenityResponse","description":"a `ResponseEntity` object containing an `AddAmenityResponse` object with the created amenities.\n\n* `ResponseEntity`: This is a class that represents a response entity in Spring WebFlux. It contains an `OK` status code and a `body` property that holds the actual response data.\n* `ok`: This is a boolean value that indicates whether the operation was successful or not. If the operation was successful, this field will be set to `true`, otherwise it will be set to `false`.\n* `amenities`: This is a list of amenity objects that were created by the `createAmenities` method. Each amenity object contains information about the amenity, such as its name, description, and category.","complex_type":true},"usage":{"language":"java","code":"@PathVariable String communityId = \"12345\";\n@RequestBody AddAmenityRequest request = new AddAmenityRequest(Arrays.asList(\"Wifi\", \"Pool\"));\nResponseEntity<AddAmenityResponse> response = addAmenityToCommunity(communityId, request);\n","description":"\nThis code creates a `String` for the community ID and an instance of the `AddAmenityRequest` class with the amenities to be added to the community. It then calls the method using these parameters as input and stores the result in the `response` variable. The `ResponseEntity` object returned by the method contains information about the status of the request, such as whether it was successful or not."},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"d6c33ad1-7d99-5d9d-584a-941765336d74","ancestors":["f0296ed9-573b-eeba-f84d-8bacf2d5eb86"],"type":"function","description":"deletes an amenity from the database using the `amenitySDJpaService`. If the amenity is successfully deleted, a `NO_CONTENT` status code is returned. Otherwise, a `NOT_FOUND` status code is returned.","params":[{"name":"amenityId","type_name":"String","description":"ID of an amenity to be deleted.\n\n* The method takes a String parameter called `amenityId`, which is used to identify a specific amenity in the system.\n* The parameter `amenityId` has a length of 20 or more characters, indicating that it is a unique identifier for each amenity in the system.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the amenity was successfully deleted.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found, which means it may have been deleted previously or it does not exist in the database.","complex_type":true},"usage":{"language":"java","code":"public ResponseEntity deleteAmenity(String amenityId) {\n    return this.amenitySDJpaService.deleteAmenity(amenityId);\n}\n","description":""},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"b08ae89d-4514-8791-4c4e-dbe741ab33cc","ancestors":["f0296ed9-573b-eeba-f84d-8bacf2d5eb86"],"type":"function","description":"updates an amenity using the provided `UpdateAmenityRequest`. If the update is successful, it returns a `ResponseEntity` with a status code of `NO_CONTENT`. If the update fails, it returns a `ResponseEntity` with a status code of `NOT_FOUND`.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity being updated.\n\n* `amenityId`: This is the unique identifier for an amenity in the system, used for updating the amenity record.","complex_type":true},{"name":"request","type_name":"UpdateAmenityRequest","description":"UpdateAmenityRequest object that contains the details of the amenity to be updated.\n\n* `@Valid` indicates that the `request` object is validated by the framework before being processed.\n* `@RequestBody` specifies that the `request` object is passed as a request body in the HTTP request.\n* `UpdateAmenityRequest` is the class that contains the properties of the request.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was updated successfully.\n\n* `HttpStatus`: This is an enumeration that indicates the HTTP status code of the response. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is a class that represents a response entity, which contains the status code and other metadata about the response.\n* `Void`: This is a type parameter that indicates that the response entity does not contain any data.","complex_type":true},"usage":{"language":"java","code":"// Set the amenityId and request body\nString amenityId = \"amenity-12345\";\nUpdateAmenityRequest request = new UpdateAmenityRequest();\nrequest.setName(\"New Amenity Name\");\n\n// Call the updateAmenity method with the parameters\nResponseEntity<Void> response = controller.updateAmenity(amenityId, request);\n\n// Check if the call was successful\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    // The call was successful, the amenity was updated\n} else {\n    // The call failed, handle the error\n}\n","description":""},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":12}]}}}
{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"A controller class called AmenityController that implements the AmenitiesApi interface. The class contains methods for listing all amenities in a community, adding a new amenity, deleting an existing amenity, and updating an existing amenity. These methods use dependencies on the AmenityService and AmenityApiMapper classes to perform CRUD operations on amenities.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"13ce6f66-3531-99ae-d044-c578ab085192","ancestors":[],"type":"function","description":"TODO","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0},"item_type":"class","length":59},{"id":"a6be10dc-4df2-0db0-f94f-275ae172b2c0","ancestors":["13ce6f66-3531-99ae-d044-c578ab085192"],"type":"function","description":"retrieves the details of an amenity using a JPA service and maps it to a `GetAmenityDetailsResponse` object.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity for which details are to be retrieved.\n\n* ` amenitySDJpaService`: This is an instance of `AmenitySDJpaService`, which is a Java class that provides methods for interacting with the amenities database.\n* `map(amenityApiMapper::amenityToAmenityDetailsResponse)`: This line uses the `map` method to apply a transformation to the result of the `getAmenityDetails` call. The transformation is performed by an instance of `AmenityApiMapper`, which is responsible for mapping the raw data from the database to the desired response format.\n* `map(ResponseEntity::ok)`: This line uses the `map` method again, this time to check if the result of the previous transformation is a `ResponseEntity` with a status code of `HttpStatus.OK`. If it is, the method returns the `ResponseEntity` directly. Otherwise, it creates a new `ResponseEntity` with a status code of `HttpStatus.NOT_FOUND`.\n* `orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());`: This line provides an alternative to the previous `map` method. If the result of the previous transformation is not a `ResponseEntity` with a status code of `HttpStatus.OK`, this line creates a new `ResponseEntity` with a status code of `HttpStatus.NOT_FOUND` and returns it directly.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing an `AmenityDetailsResponse` object.\n\n* `ResponseEntity<GetAmenityDetailsResponse>` is an entity that contains a `getAmenityDetailsResponse` field, which is a response to the API request.\n* `getAmenityDetailsResponse` is a class that contains fields for `amenityId`, `name`, `description`, `icon`, and `location`. These fields represent the details of the amenity retrieved from the database.\n* The `map` method is used to transform the `List<Amenity>` returned by the `getAmenityDetails` function into a `ResponseEntity` with an `ok` status code.\n* The `orElse` method is used as a fallback to return a `ResponseEntity` with a `NOT_FOUND` status code if the `map` method does not produce a valid response.","complex_type":true},"usage":{"language":"java","code":"String amenityId = \"amenity1\";\nResponseEntity<GetAmenityDetailsResponse> response = \n    controller.getAmenityDetails(amenityId);\n","description":"\nIn this example, we are passing the amenityId as a string to the method getAmenityDetails. The method returns an object of type ResponseEntity, which is then assigned to the variable response."},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"1dcc403f-c67d-eeb2-3e4b-b52823bc9c57","ancestors":["13ce6f66-3531-99ae-d044-c578ab085192"],"type":"function","description":"returns a set of `GetAmenityDetailsResponse` objects containing details of all amenities associated with a given community ID, retrieved from the database using `amenitySDJpaService`, and then mapped to the response set using `amenityApiMapper`.","params":[{"name":"communityId","type_name":"String","description":"ID of the community whose amenities are to be listed.\n\n* `String communityId`: This is the path variable that represents the ID of a community. It is an essential parameter for retrieving amenities in this function.","complex_type":true}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing information about the amenities.\n\n* `ResponseEntity`: This is the generic type of the response entity, which is an object that represents a successful HTTP response with a status code and a body.\n* `Set<GetAmenityDetailsResponse>`: This is the set of `AmenityDetailsResponse` objects that contain the details of each amenity in the community.\n* `amenities`: This is the list of `Amenity` objects that are retrieved from the database using the `listAllAmenities` function.\n* `amenitySDJpaService`: This is the Java Persistence API (JPA) service that is used to retrieve the list of amenities from the database.\n* `GetAmenityDetailsResponse`: This is the type of the objects in the `response` set, which contain the details of each amenity in the community.\n\nThe `listAllAmenities` function returns a response entity with a status code of `200 OK` and a body that contains a set of `GetAmenityDetailsResponse` objects, each containing the details of a single amenity in the community.","complex_type":true},"usage":{"language":"java","code":"String communityId = \"community-123\";\nSet<GetAmenityDetailsResponse> response = listAllAmenities(communityId);\n","description":"\nThis line of code calls the listAllAmenities method and passes in a String variable called communityId. The method then returns a Set object of type GetAmenityDetailsResponse, which is stored in the response variable."},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"755966a3-9d69-d5ad-d64c-eaa0e3a10310","ancestors":["13ce6f66-3531-99ae-d044-c578ab085192"],"type":"function","description":"adds amenities to a community based on a request body containing the amenities and the community ID. It returns an HTTP ResponseEntity with OK status code if the amenities are added successfully, otherwise it returns NOT FOUND status code.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities will be added.\n\n* `communityId`: This is a String variable that represents the identifier of a community. It is passed as a path variable in the HTTP request.\n* `@PathVariable`: This is an annotation that indicates that the value of the `communityId` variable is provided by the URL path and should be extracted from it.","complex_type":true},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object that contains the amenities to be added to the community, which is passed from the client to the server for processing.\n\n* `request.getAmenities()`: This is an array of `AddAmenityRequest.Amenity` objects, representing the amenities to be added to the community. Each `Amenity` object has the following properties:\n\t+ `name`: The name of the amenity.\n\t+ `description`: A brief description of the amenity.\n\t+ `type`: The type of amenity (e.g., \"park\", \"library\", etc.).\n* `communityId`: The ID of the community to which the amenities will be added.","complex_type":true}],"returns":{"type_name":"AddAmenityResponse","description":"a `ResponseEntity` object with a status of `ok` and a body containing the list of added amenities.\n\n* `ResponseEntity<AddAmenityResponse>`: This is an instance of the `ResponseEntity` class, which contains a `body` field that represents the result of the API call. In this case, the body is an instance of `AddAmenityResponse`.\n* `AddAmenityResponse`: This class represents the response of the API call, including the list of created amenities. It has a single field called `amenities`, which is a list of `Amenity` objects representing the created amenities.\n* `ok`: This is a Boolean value indicating whether the API call was successful or not. If the call was successful, this field will be set to `true`, otherwise it will be set to `false`.\n* `notFound`: This is an instance of the `ResponseEntity` class, which indicates that the requested community could not be found. It has a single field called `body`, which is an instance of the `ErrorResponse` class representing the error message.","complex_type":true},"usage":{"language":"java","code":"AddAmenityRequest request = new AddAmenityRequest();\nrequest.setAmenities(Set.of(\"air conditioning\", \"pet friendly\"));\nResponseEntity<AddAmenityResponse> response = amenityController.addAmenityToCommunity(\"1234567890\", request);\n","description":"\nThis code sets the community ID to \"1234567890\" and the set of amenities to air conditioning and pet friendly. The addAmenityToCommunity method is then called on the AmenityController with these inputs, resulting in a ResponseEntity object that contains an AddAmenityResponse object with the list of added amenities."},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"7043ac46-61cd-e99d-de4c-a32a70f20db3","ancestors":["13ce6f66-3531-99ae-d044-c578ab085192"],"type":"function","description":"deletes an amenity from the database using the `amenitySDJpaService`. If successful, it returns a `ResponseEntity` with a status code of `NO_CONTENT`. Otherwise, it returns a `ResponseEntity` with a status code of `NOT_FOUND`.","params":[{"name":"amenityId","type_name":"String","description":"ID of an amenity to be deleted.\n\n* `amenityId`: A String that represents the unique identifier for an amenity to be deleted from the database.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and resulted in no content being sent back to the client. It is a common response when the requested resource is successfully deleted.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the requested amenity could not be found. It may be because the amenity ID provided does not match any existing amenity, or there may be some other error in the request.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n","description":""},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"b4999ce0-2699-559d-724b-df0938edc7f8","ancestors":["13ce6f66-3531-99ae-d044-c578ab085192"],"type":"function","description":"updates an amenity in the database based on a request received from the client. It first converts the request to an `AmenityDto` object, then updates the amenity using the `amenitySDJpaService`, and finally returns a response indicating whether the update was successful or not.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity being updated.\n\n* `amenityId`: This is a String variable representing the amenity ID being updated.","complex_type":true},{"name":"request","type_name":"UpdateAmenityRequest","description":"UpdateAmenityRequest object containing the details of an amenity to be updated, which is converted into an AmenityDto object by the amenityApiMapper before being passed to the amenitySDJpaService for update.\n\n* `@Valid`: This annotation indicates that the request body must be validated according to the schema defined in the Java code.\n* `@RequestBody`: This annotation specifies that the request body is a JSON object that contains the request data.\n* `UpdateAmenityRequest` is the class that defines the structure of the request data, which includes properties such as `amenityId`, `name`, and `description`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was updated successfully.\n\n* `HttpStatus`: This is an instance of the `HttpStatus` class, which represents the HTTP status code returned by the method. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response entity with a status code and a body. The body can be either an empty object (`{}`) for `NO_CONTENT` or a `Void` object for `NOT_FOUND`.","complex_type":true},"usage":{"language":"java","code":"UpdateAmenityRequest updateAmenity = new UpdateAmenityRequest();\nupdateAmenity.setName(\"updated name\");\nupdateAmenity.setDescription(\"updated description\");\nUpdateAmenityResponse response = controller.updateAmenity(amenityId, updateAmenity);\n","description":"\nThe above example updates the amenity with the given amenityId with the new information provided in the UpdateAmenityRequest object."},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":12}]}}}
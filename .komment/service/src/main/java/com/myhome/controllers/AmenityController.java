{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"A REST controller class `AmenityController` that implements the `AmenitiesApi` interface. The class has several methods that handle different amenity-related operations, such as getting or listing all amenities for a given community, adding or deleting an amenity, and updating an amenity's details. The code uses various Spring packages, including `SpringWebFlux`, `Lombok`, and `Slf4j`, to handle HTTP requests and responses, generate domain objects, and log errors.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"dc0eaef1-e4a2-0fb2-9747-b22118b96aeb","ancestors":[],"type":"function","description":"TODO","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0},"item_type":"class","length":59},{"id":"900fdb4a-d783-ffb6-a04e-98904161320f","ancestors":["dc0eaef1-e4a2-0fb2-9747-b22118b96aeb"],"type":"function","description":"retrieves amenity details from the database using the `amenitySDJpaService`, maps them to `AmenityDetailsResponse` objects using `amenityApiMapper`, and returns a `ResponseEntity` with a status of `OK` or an empty response entity if the amenity ID does not exist.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity for which details are requested.\n\n* The input `amenityId` is a string variable that represents the unique identifier for an amenity.\n* The `amenityId` can be used to retrieve specific details about the amenity, such as its name, description, and location.\n* The `amenityId` is passed as a path variable in the URL, which allows the function to retrieve the appropriate details based on the input provided.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"an `ResponseEntity` object representing a successful response with an `ok` status and the details of the requested amenity.\n\n* `ResponseEntity<GetAmenityDetailsResponse>`: This represents an entity that contains an instance of `GetAmenityDetailsResponse`, which is a class with properties representing the details of an amenity.\n* `getAmenityDetails(String amenityId)`: This method takes a string parameter representing the ID of the amenity for which details are being requested.\n* `amenitySDJpaService.getAmenityDetails(amenityId)`: This line calls the `getAmenityDetails` method of the `amenitySDJpaService` class, which returns an instance of `AmenityDetailsResponse`.\n* `map(Function<AmenityDetailsResponse, GetAmenityDetailsResponse> mapper)`: This line applies a mapping function to the output of the `amenitySDJpaService.getAmenityDetails` method, which converts the output into an instance of `GetAmenityDetailsResponse`.\n* `map(ResponseEntity::ok)`: This line maps the output of the mapping function to a `ResponseEntity` object with a status code of `HttpStatus.OK`.\n* `orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build())`: This line provides an alternative response if the `map` method does not produce a valid output. In this case, it returns a `ResponseEntity` object with a status code of `HttpStatus.NOT_FOUND`.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<GetAmenityDetailsResponse> response = controller.getAmenityDetails(\"amenityId\");\nif (response.getStatusCode().equals(HttpStatus.OK)) {\n  GetAmenityDetailsResponse amenityDetailsResponse = response.getBody();\n  // use the amenity details\n} else if (response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {\n  // handle the not found case\n}\n","description":""},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"1a507530-d609-49ae-4541-ac645c16de8f","ancestors":["dc0eaef1-e4a2-0fb2-9747-b22118b96aeb"],"type":"function","description":"retrieves a list of amenities from the database using `amenitySDJpaService`, maps them to `GetAmenityDetailsResponse` set using `amenityApiMapper`, and returns a response entity with the mapped set.","params":[{"name":"communityId","type_name":"String","description":"ID of the community whose amenities are to be listed.\n\n* The variable `communityId` represents a `String` data type, which is the primary key for the `Community` entity in the database.\n* It is passed as an HTTP parameter through the `@PathVariable` annotation, indicating that it should be retrieved from the URL path.\n* The `communityId` variable contains the unique identifier of a community, which is used to retrieve the corresponding amenities from the database.","complex_type":true}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing the details of all amenities for a given community.\n\n* `ResponseEntity`: This is the class that represents an HTTP response entity, which contains a result and additional metadata. In this case, the result is a set of `GetAmenityDetailsResponse` objects.\n* `ok`: This is the HTTP status code indicating that the request was successful.\n* `Set<GetAmenityDetailsResponse>`: This is the set of `GetAmenityDetailsResponse` objects that are contained in the response entity. Each object in the set represents a single amenity, with its details such as name, description, and images.","complex_type":true},"usage":{"language":"java","code":"String communityId = \"123456789\";\nSet<GetAmenityDetailsResponse> response = \n    amenityController.listAllAmenities(communityId);\n","description":""},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"0a842b57-85d8-5492-da4e-2b39cccc253a","ancestors":["dc0eaef1-e4a2-0fb2-9747-b22118b96aeb"],"type":"function","description":"adds amenities to a community through JPA service, mapping the response to an `AddAmenityResponse` object and returning it as an `ok` ResponseEntity or a `notFound` ResponseEntity if any errors occurred.","params":[{"name":"communityId","type_name":"String","description":"unique identifier for the community to which the amenities will be added.\n\n* `communityId`: This is a String representing the ID of a community in the application. It serves as the primary key for the community object in the database.\n\nThe function first calls the `createAmenities` method of the `amenitySDJpaService` class, passing in the amenities and the community ID as parameters. This method creates a list of `Amenity` objects in the database using the provided amenities and community ID.\n\nNext, the function maps the list of `Amenity` objects to an instance of the `AddAmenityResponse` class, which contains a list of `Amenity` objects representing the added amenities. Finally, the function returns an `ResponseEntity` object with a status code of `ok`, indicating that the operation was successful. If any errors occurred during the process, the function will return an `ResponseEntity` object with a status code of `notFound`, indicating that the community ID could not be found in the database.","complex_type":true},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to the community, which is used by the `amenitySDJpaService` to create the new amenities in the community.\n\n* `communityId`: A string representing the unique identifier of the community to which the amenities will be added.\n* `requestBody`: The request body contains the list of amenities to be added to the community, represented as a JSON object with properties such as name, description, and type.","complex_type":true}],"returns":{"type_name":"AddAmenityResponse","description":"a `ResponseEntity` object representing the result of adding an amenity to a community.\n\n* `ResponseEntity<AddAmenityResponse>`: This represents an entity that contains a response message and an amenities list.\n* `Map<Function, T>`: This is a method that maps a functional interface to its corresponding value. In this case, it maps the `AddAmenityRequest` request body to a `AddAmenityResponse` object.\n* `orElse(T alternative)`: This is a method that returns the result of either the given expression or the provided alternative. In this case, it returns `ResponseEntity.notFound().build()` if the `createAmenities` call fails.\n* `map(Function<T, U> mapper)`: This is another method that maps the output of a function to a new type. In this case, it maps the `AddAmenityResponse` object to an `Ok` response entity.","complex_type":true},"usage":{"language":"java","code":"String communityId = \"community_id\";\nAddAmenityRequest request = new AddAmenityRequest();\nList<Amenity> amenities = Arrays.asList(new Amenity(\"amenity1\", true), new Amenity(\"amenity2\", false));\nrequest.setAmenities(amenities);\nResponseEntity<AddAmenityResponse> response = addAmenityToCommunity(communityId, request);\n","description":""},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"90ed6303-e84c-8981-594d-d331e3c7e314","ancestors":["dc0eaef1-e4a2-0fb2-9747-b22118b96aeb"],"type":"function","description":"deletes an amenity from the system based on the specified `amenityId`. If successful, it returns a response entity with a `NO_CONTENT` status code; otherwise, it returns a response entity with a `NOT_FOUND` status code.","params":[{"name":"amenityId","type_name":"String","description":"ID of an amenity to be deleted.\n\n* `amenitySDJpaService`: This is an instance of `AmenitySDJpaService`, which is a Java class that provides methods for managing amenities.\n* `deleteAmenity(amenityId)`: This method is defined in the `AmenitySDJpaService` class and takes a single parameter, `amenityId`, which is of type `String`. The method deletes an amenity with the specified `amenityId` using JPA (Java Persistence API) functionality.\n* `isAmenityDeleted`: This variable is assigned the value returned by the `deleteAmenity(amenityId)` method, which indicates whether the amenity was successfully deleted or not. If the amenity was successfully deleted, the value of this variable is `true`, otherwise it is `false`.\n* `HttpStatus.NO_CONTENT`: This is an instance of the `HttpStatus` class, which represents a HTTP status code indicating that the request was successful and there is no content to be returned.\n* `HttpStatus.NOT_FOUND`: This is an instance of the `HttpStatus` class, which represents a HTTP status code indicating that the requested resource could not be found.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a HTTP status code indicating whether the amenity was successfully deleted or not.\n\n* `HttpStatus`: This is an instance of the `HttpStatus` class, which represents the HTTP status code returned by the function. The value of this field is either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response message for the HTTP request. The `HttpStatus` field of this object contains the HTTP status code returned by the function, and the `body` field contains the error message if the amenity could not be deleted.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n","description":"\nThis method deleteAmenity() takes a string input (amenityId) which is the ID of the Amenity that needs to be deleted from the database. The method then uses this input to call the JPA service's deleteAmenity() method, passing in the amenityId as an argument. This method returns true if the amenity is successfully deleted and false otherwise.\n\nThe example code then checks if the amenity is deleted. If it is, then a response with a status of HttpStatus.NO_CONTENT is returned. If not, then a response with a status of HttpStatus.NOT_FOUND is returned."},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"3a87ce42-3c10-81ac-9c4b-b8f02f712ada","ancestors":["dc0eaef1-e4a2-0fb2-9747-b22118b96aeb"],"type":"function","description":"updates an amenity using the provided ID and request body data, returning a response indicating the outcome of the update.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity being updated.\n\n* `amenityId`: A string representing the ID of the amenity to be updated.\n\nThe function processes the input request and updates the amenity in the database using the `amenitySDJpaService`. The update is successful if a `ResponseEntity` with status code `NO_CONTENT` is returned, indicating that the amenity was updated successfully. Otherwise, a `ResponseEntity` with status code `NOT_FOUND` is returned, indicating that the amenity could not be found in the database.","complex_type":true},{"name":"request","type_name":"UpdateAmenityRequest","description":"updateAmenityRequest object that contains the details of the amenity to be updated, which is then converted into an AmenityDto object and passed as a parameter to the `amenitySDJpaService.updateAmenity()` method for updating the amenity in the database.\n\n* `@Valid`: Indicates that the input `request` must be validated according to the specified validation rules.\n* `@RequestBody`: Marks the `request` parameter as a request body, indicating that its value should be serialized and sent in the HTTP request message.\n* `UpdateAmenityRequest`: Represents the request body data structure containing the fields for updating an amenity.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was updated successfully.\n\n* `HttpStatus`: This is an enumeration that represents the HTTP status code of the response. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is a class that holds the HTTP status code and the body of the response. The body can be either an empty object (`NO_CONTENT`) or a `Void` object (`NOT_FOUND`).","complex_type":true},"usage":{"language":"java","code":"// Example 1: Update the Amenity with amenityId = \"amenityId\" in the community with communityId = \"communityId\"\nString communityId = \"communityId\";\nString amenityId = \"amenityId\";\nUpdateAmenityRequest request = new UpdateAmenityRequest(\"amenity name\", \"amenity description\");\nResponseEntity<Void> response = updateAmenity(amenityId, request);\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"Amenity updated successfully.\");\n} else {\n    System.out.println(\"Error occurred while updating the amenity: \" + response.getBody());\n}\n","description":""},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":12}]}}}
{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"A REST controller class called `AmenityController` that implements the `AmenitiesApi` interface. The class contains methods for listing all amenities, adding new amenities, deleting existing amenities, and updating existing amenities. These methods use the `AmenityService` and `AmenityApiMapper` classes to interact with the underlying data storage. The code also uses Spring WebFlux features such as `@PathVariable`, `@RequestBody`, and `@ResponseEntity`.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a059c809-52e9-d3bc-a94f-60204f7cddf0","ancestors":[],"type":"function","description":"TODO","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0},"item_type":"class","length":59},{"id":"fbb3d9ab-2eaf-7790-c74b-6c964e20bd6e","ancestors":["a059c809-52e9-d3bc-a94f-60204f7cddf0"],"type":"function","description":"retrieves amenity details from the database using `amenitySDJpaService`, maps them to `AmenityDetailsResponse` objects using `amenityApiMapper`, and returns a `ResponseEntity` object with a status of `OK` or an alternative status if the amenity ID is not found.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity that is being requested by the user.\n\n* `amenityId`: A string representing the unique identifier for an amenity.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the details of the specified amenity.\n\n* `ResponseEntity<GetAmenityDetailsResponse>`: This is a generic type that represents an entity containing a response to the `getAmenityDetails` request. The `ResponseEntity` class provides a convenient way to handle both successful and failed responses in a single method call.\n* `getAmenityDetails(String amenityId)`: This is the method that is being overridden, which takes an `amenityId` parameter and returns a `ResponseEntity` object containing the details of the requested amenity.\n* `amenitySDJpaService.getAmenityDetails(amenityId)`: This is a call to the `amenitySDJpaService` class's `getAmenityDetails` method, which retrieves the details of the specified amenity from the database.\n* `amenityApiMapper.amenityToAmenityDetailsResponse(Amenity amenity)`: This is a method that maps an `Amenity` object to an `AmenityDetailsResponse` object, which contains additional information about the amenity such as its name, description, and location.\n* `map(ResponseEntity::ok)`: This line of code calls the `map` method on the `ResponseEntity` object, which checks if the response status is 200 (OK) and returns a `ResponseEntity` object with the status set to OK if it is.\n* `orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());`: This line of code provides an alternative way to handle failed responses. If the response status is not 200 (OK), it will create a new `ResponseEntity` object with a status of HTTP_NOT_FOUND and build it using the `build` method.","complex_type":true},"usage":{"language":"java","code":"GetAmenityDetailsResponse response = controller.getAmenityDetails(\"1234\");\nif (response != null) {\n    // Print the details of the amenity with id \"1234\"\n    System.out.println(response.getName());\n} else {\n    // Handle error scenario where the amenity does not exist\n    System.out.println(\"Amenity with id '1234' was not found\");\n}\n","description":""},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"7eb80159-fc5b-9aa8-bf46-2e03781c7e8f","ancestors":["a059c809-52e9-d3bc-a94f-60204f7cddf0"],"type":"function","description":"retrieves a list of amenities from the database and maps them to a set of `GetAmenityDetailsResponse` objects for further processing.","params":[{"name":"communityId","type_name":"String","description":"ID of the community whose amenities are to be listed.\n\n* `communityId`: A string representing the unique identifier for a community.\n* Length: Exactly 20 characters.\n* Data type: String.","complex_type":true}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing the details of all amenities associated with the specified community.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which is a class that represents a response entity in Spring WebFlux. It contains an `OK` status code and a body containing the list of amenities.\n* `Set<GetAmenityDetailsResponse>`: This is a set of `GetAmenityDetailsResponse` objects, which are the result of mapping the list of amenities returned by the `listAllAmenities` function to the desired response format using the `amenityApiMapper`. Each element in the set contains details about a particular amenity, such as its name, type, and location.\n* `amenitySDJpaService`: This is an instance of `Amenity SD Jpa Service`, which is responsible for accessing and manipulating data related to amenities in the database using JPA (Java Persistence API).\n* `communityId`: This is a string parameter passed to the function, representing the community ID for which the list of amenities is being retrieved.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n        @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n            amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n}\n","description":""},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2},"item_type":"method","length":8},{"id":"53578c87-0c0f-ac9d-b446-ffd477717951","ancestors":["a059c809-52e9-d3bc-a94f-60204f7cddf0"],"type":"function","description":"adds amenities to a community through the creation of a new amenity list and its association with the specified community ID using the `amenitySDJpaService`.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to which the amenities are being added.\n\n* `communityId`: A string representing the ID of a community. It is used as a parameter in the function and is also passed to the `amenitySDJpaService` for creating amenities.","complex_type":true},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to the community, which is used by the `amenitySDJpaService` to create the new amenities in the database.\n\n* `communityId`: A string representing the ID of the community to which the amenities will be added.\n* `request.getAmenities()`: An array of objects containing information about the amenities to be added, including their names and types.","complex_type":true}],"returns":{"type_name":"AddAmenityResponse","description":"a `ResponseEntity` object representing a successful addition of amenities to a community.\n\n* `ResponseEntity<AddAmenityResponse>`: This is the type of the returned entity, which contains an `amenities` field that is a list of amenities.\n* `ok`: This is a property of the returned entity, indicating whether the operation was successful or not. It is set to `true` if the operation succeeded and `false` otherwise.\n* `notFound`: This is another property of the returned entity, indicating whether the community with the given ID was found or not. If the community was not found, this property is set to a `ResponseEntity` object with a status code of 404.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void addAmenityToCommunity_success() {\n  // given\n  String communityId = \"1234567890\";\n  AddAmenityRequest request = new AddAmenityRequest();\n  request.setAmenities(Set.of(\"Wi-Fi\", \"Microwave\"));\n  \n  // when\n  ResponseEntity<AddAmenityResponse> response = controller.addAmenityToCommunity(communityId, request);\n  \n  // then\n  assertEquals(HttpStatus.OK, response.getStatusCode());\n  assertTrue(response.hasBody());\n}\n","description":""},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"57aeb652-bd6a-449b-5b44-d08e0e410f6e","ancestors":["a059c809-52e9-d3bc-a94f-60204f7cddf0"],"type":"function","description":"deletes an amenity from the database based on its ID, returning a response entity indicating whether the operation was successful or not.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity to be deleted.\n\n* `amenityId`: A string representing the amenity ID to be deleted.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and the amenity was deleted.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found or was not deleted.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void deleteAmenity_validId_returnsStatusNoContent() {\n    // Arrange\n    String amenityId = \"123\";\n    AmenityService mockAmenitySDJpaService = Mockito.mock(AmenityService.class);\n    AmenityController cut = new AmenityController(mockAmenitySDJpaService, new AmenityApiMapper());\n    \n    // Act\n    ResponseEntity response = cut.deleteAmenity(amenityId);\n    \n    // Assert\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n}\n","description":"\nIn this test, a String id is passed to the deleteAmenity method, which will attempt to remove an Amenity from the database with that id. The method is expected to return status HttpStatus.NO_CONTENT, indicating that the operation was successful."},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"9cba77cf-9c74-4ca0-5347-b5f08bac38fc","ancestors":["a059c809-52e9-d3bc-a94f-60204f7cddf0"],"type":"function","description":"updates an amenity record using the provided `UpdateAmenityRequest`. If successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT`. Otherwise, it returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND`.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity being updated.\n\n* `amenityId`: This is the primary key for an amenity, representing a unique identifier for the amenity.","complex_type":true},{"name":"request","type_name":"UpdateAmenityRequest","description":"UpdateAmenityRequest object containing the details of an amenity to be updated, which is mapped to an AmenityDto object through the amenityApiMapper method before being passed to the amenitySDJpaService for update operation.\n\n* `@Valid`: Indicates that the input request body must be valid according to the specified schema.\n* `@RequestBody`: Represents the request body as a single entity, indicating that it should be deserialized and used as the request body.\n* `UpdateAmenityRequest`: This class represents the request body, which contains the details of an amenity to be updated.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was updated successfully.\n\n* The `HttpStatus` field indicates whether the operation was successful (NO_CONTENT) or not (NOT_FOUND).\n* The `ResponseEntity` object itself represents a response message to the client, which includes the status code, headers, and body.\n* The `build()` method is used to create a new ResponseEntity instance with the specified properties.","complex_type":true},"usage":{"language":"java","code":"import java.util.ArrayList;\nimport java.util.List;\n\npublic class App {\n  public static void main(String[] args) {\n    UpdateAmenityRequest request = new UpdateAmenityRequest();\n    List<AmenityDto> amenities = new ArrayList<>();\n    AmenityDto amenity1 = new AmenityDto();\n    amenity1.setName(\"Air conditioner\");\n    amenity1.setDescription(\"Cool and refreshing air\");\n    AmenityDto amenity2 = new AmenityDto();\n    amenity2.setName(\"Bedding\");\n    amenity2.setDescription(\"Comfortable bedding for guests\");\n    amenities.add(amenity1);\n    amenities.add(amenity2);\n    request.setAmenities(amenities);\n    String amenityId = \"1\";\n    ResponseEntity<Void> response = updateAmenity(amenityId, request);\n  }\n}\n","description":""},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":12}]}}}
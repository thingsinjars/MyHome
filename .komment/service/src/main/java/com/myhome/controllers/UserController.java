{"name":"UserController.java","path":"service/src/main/java/com/myhome/controllers/UserController.java","content":{"structured":{"description":"A `UserController` that implements `UsersApi`. It handles various user-related actions such as signing up, listing all users, getting details of a specific user, resetting or forgetting passwords, and confirming or resending email confirmations. The controller uses several packages, including Spring Data, Spring Web, Lombok, Slf4j, and Apache Commons Lang.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"19675247-7e95-01b2-b044-37375ebb4bfa","ancestors":[],"type":"function","description":"TODO","name":"UserController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class UserController implements UsersApi {\n\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final HouseService houseService;\n  private final HouseMemberMapper houseMemberMapper;\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n}","location":{"start":50,"insert":50,"offset":" ","indent":0},"item_type":"class","length":96},{"id":"b206d9df-a928-98a2-5848-288e63ad5a6a","ancestors":["19675247-7e95-01b2-b044-37375ebb4bfa"],"type":"function","description":"receives a `CreateUserRequest` object, creates a `UserDto` object using the provided request data, and then either creates a new user or returns a conflict status code if the user already exists.","params":[{"name":"request","type_name":"CreateUserRequest","description":"`CreateUserRequest` object passed from the client, containing the user's details for creation.\n\nThe `@Valid` annotation on the `CreateUserRequest` parameter indicates that the request body must contain valid JSON data in accordance with the provided schema. The `log.trace()` statement logs a trace message indicating that the sign-up request was received.\n\nThe `userApiMapper.createUserRequestToUserDto(request)` method converts the `CreateUserRequest` object into a `UserDto` object, which contains the user's details in a more structured format for further processing.\n\nThe `Optional<UserDto>` variable `createdUserDto` stores the result of calling the `userService.createUser(requestUserDto)` method, which creates a new user in the system. If the user creation was successful, this variable will contain the created `UserDto` object; otherwise, it will be empty (i.e., `Optional<UserDto> empty = ...`).\n\nFinally, the `map()` method is used to transform the `createdUserDto` into a `CreateUserResponse` object using the `userApiMapper.userDtoToCreateUserResponse(userDto)` method. The resulting `ResponseEntity` object is then constructed with a status code of `HttpStatus.CREATED` and the created `CreateUserResponse` object as its body. If the user creation failed, an `Optional<ResponseEntity>` object will be constructed containing a `ResponseEntity` object with a status code of `HttpStatus.CONFLICT`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of `CREATED` and the created user's response details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. The status code of the response is specified in the `status` field, which can be either `CREATED`, `CONFLICT`, or any other valid HTTP status code.\n* `body`: This is a reference to the actual response body, which in this case is an instance of the `CreateUserResponse` class. The `body` field cannot be null.\n\nIn summary, the output of the `signUp` function is a `ResponseEntity` object with a non-null `body` field containing a `CreateUserResponse`.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void signUp_validRequest_returnsCreatedResponse() {\n    // given\n    CreateUserRequest request = new CreateUserRequest();\n    request.setEmail(\"user123@email.com\");\n    request.setPassword(\"password123\");\n    \n    // when\n    ResponseEntity<CreateUserResponse> response = \n        controller.signUp(request);\n    \n    // then\n    assertEquals(HttpStatus.CREATED, response.getStatusCode());\n}\n","description":""},"name":"signUp","code":"@Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"2bcb3bf7-c485-0690-4f4b-455dc7a8bbfa","ancestors":["19675247-7e95-01b2-b044-37375ebb4bfa"],"type":"function","description":"receives a pageable request from the client, retrieves all users from the database using the `userService`, maps them to a response entity using the `userApiMapper`, and returns it to the client with a status code of OK.","params":[{"name":"pageable","type_name":"Pageable","description":"page number and page size for listing all users, allowing for efficient pagination of the user list.\n\n* `log.trace()` - Traces the method execution for logging purposes.\n* `userService.listAll(pageable)` - Calls the `listAll` method of the `userService` object, passing in the `pageable` input as a parameter.\n* `userApiMapper.userSetToRestApiResponseUserSet(userDetails)` - Maps the user details to a response format using the `userApiMapper`.\n* `GetUserDetailsResponse response = new GetUserDetailsResponse()` - Creates a new instance of the `GetUserDetailsResponse` class.\n* `response.setUsers(userDetailsResponse)` - Sets the users property of the response object to the mapped user details.","complex_type":true}],"returns":{"type_name":"GetUserDetailsResponse","description":"a list of user details in REST API format.\n\n* `GetUserDetailsResponse`: This is the class that represents the response to the list all users request. It has a set of `User` objects as its attribute, which contain the details of each user.\n* `setUsers()`: This method sets the `User` object set in the response.\n* `HttpStatus.OK`: This is the HTTP status code returned by the function, indicating that the request was successful.\n* `body()`: This method returns the response body, which contains the list of users in the form of a `GetUserDetailsResponse`.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        // Create a new instance of the UserService class\n        UserService userService = new UserService();\n\n        // Call the listAllUsers() method with an instance of the Pageable class as its argument.\n        Set<User> users = userService.listAllUsers(new Pageable());\n    }\n}\n","description":""},"name":"listAllUsers","code":"@Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":73,"insert":73,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"d2c6b3a7-974a-1995-a84a-ae7cd302fb48","ancestors":["19675247-7e95-01b2-b044-37375ebb4bfa"],"type":"function","description":"receives a user ID as input and returns a `ResponseEntity` object containing the details of the user with that ID, processed through the `userService` and `userApiMapper` objects.","params":[{"name":"userId","type_name":"String","description":"unique identifier of the user for whom details are requested.\n\n* `log.trace()` records a log message about receiving a request to retrieve user details with the specified `userId`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with an HTTP status code of OK and the user details in the body.\n\n* The `ResponseEntity` object is constructed with a status code of `HttpStatus.OK`, indicating that the request was successful.\n* The `body` property of the `ResponseEntity` object contains the actual response data, which is a `GetUserDetailsResponseUser` object in this case. This object represents the user details returned by the function.\n* The `map` method is used to transform the `userDtoToGetUserDetailsResponse` object into a `GetUserDetailsResponseUser` object. This transformation is performed using the `userApiMapper` function, which is not explicitly defined in the code snippet provided.","complex_type":true},"usage":{"language":"java","code":"GetUserDetailsResponse response = userController.getUserDetails(\"userId\");\n","description":"\nThis would return a response with the details of the user that matches the given Id (in this case, \"userId\")."},"name":"getUserDetails","code":"@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":87,"insert":87,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"52a4034f-538f-6fa4-2644-5e07e238f162","ancestors":["19675247-7e95-01b2-b044-37375ebb4bfa"],"type":"function","description":"takes a `String` action and a `@Valid @RequestBody ForgotPasswordRequest` object as input, and based on the value of the `action` parameter, performs a password reset or sends an email to reset the password. If successful, it returns a `ResponseEntity` with a status code of `OK`.","params":[{"name":"action","type_name":"String","description":"type of password action to be performed, which determines the corresponding logic to be executed within the function.\n\n* `@NotNull` and `@Valid` annotations on `action` indicate that it must be provided as a non-null and valid JSON object.\n* `parsedAction` is a field that stores the parsed value of `action`. It is initialized to `PasswordActionType.valueOf(action)` using the `PasswordActionType.valueOf()` method, which parses the value of `action` based on its string representation.\n* `result` is a boolean variable that indicates whether the operation was successful. It is set to `true` if the operation was successful, and `false` otherwise.\n\nIn summary, the `action` input parameter has two properties: it must be provided as a non-null and valid JSON object, and its value is parsed using the `PasswordActionType.valueOf()` method to determine the type of action being performed.","complex_type":true},{"name":"forgotPasswordRequest","type_name":"ForgotPasswordRequest","description":"password reset request from the user, which contains the username and other necessary information to initiate the password reset process.\n\n* `action`: A string indicating the type of password action being performed, which can be either `FORGOT` or `RESET`.\n* `forgotPasswordRequest`: An object containing information about the user's forgotten password request, including their username and email address.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `OK` or `BAD_REQUEST`, depending on whether the password reset was successful or not.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response message to a HTTP request. It has a `ok()` method that returns a `ResponseEntity` with a status code of 200 (OK) and a `badRequest()` method that returns a `ResponseEntity` with a status code of 400 (BAD REQUEST).\n* `Void`: This is the type of the value returned by the function, which means it has no value or is void.\n\nThe various attributes of the output are:\n\n* `result`: This is a boolean attribute that indicates whether the password reset was successful or not. It is set to `true` if the password was successfully reset, and `false` otherwise.\n* `parsedAction`: This is an instance of the `PasswordActionType` class, which represents the action taken by the function. It can take on one of the following values: `FORGOT`, `RESET`, or `UNKNOWN`.","complex_type":true},"usage":{"language":"java","code":"@Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest = new ForgotPasswordRequest();\n\n// This userId represents the Id of a user that needs to reset its password\nString userId = \"0123456789\";\n\nusersPasswordPost(PasswordActionType.FORGOT.name(), forgotPasswordRequest);\n","description":"\nThe above example calls the method usersPasswordPost with the action set to \"FORGOT\" and a ForgotPasswordRequest object. The method would then call userService.requestResetPassword with the ForgotPasswordRequest object as an argument.\n\nIn this case, the method returns ResponseEntity.ok().build() after successfully executing userService.requestResetPassword with the ForgotPasswordRequest object as an argument."},"name":"usersPasswordPost","code":"@Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":97,"insert":97,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"c050dc2f-754b-bbb1-dc4b-8df01c255654","ancestors":["19675247-7e95-01b2-b044-37375ebb4bfa"],"type":"function","description":"receives a user ID and pageable parameters, queries the `houseService` for all houses associated with the user, maps the resulting house members to a `RestApiResponseHouseMemberSet`, and returns a `ResponseEntity` object representing the list of house members.","params":[{"name":"userId","type_name":"String","description":"ID of the user whose houses are to be listed.\n\n* `userId`: String representing the user ID for whom all houses' members will be listed.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"pagination information for retrieving a list of house members, allowing the method to return a limited number of results per page.\n\n* `userId`: A String representing the user whose houses to list members for.\n* `pageable`: A Pageable object that can be used to specify pagination parameters for the list request. The pageable object has various attributes, including:\n\t+ `pageNumber`: An Integer indicating the current page number being retrieved.\n\t+ `pageSize`: An Integer representing the number of members to display per page.\n\t+ `sort`: A String representing the field to sort the results by (optional).\n\t+ `direction`: A String representing the direction of the sort (optional).","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing a list of house members for the specified user.\n\n* `ResponseEntity`: This is the outermost class in the chain of method calls that returns the final response entity. It contains an `ok` field that indicates whether the request was successful or not. If it's not `ok`, then the response entity will be a `NotFound` entity with a build() method that creates the response.\n* `ListHouseMembersResponse`: This is a inner class of `ResponseEntity`. It contains a `members` field that holds a list of `HouseMemberSet` objects, which are converted from `houseService.listHouseMembersForHousesOfUserId(userId, pageable)` using the `map()` method.\n* `HouseMemberSet`: This is an inner class of `ListHouseMembersResponse`. It contains a list of `HouseMember` objects, which are converted from the `houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet()` method using the `map()` method.\n* `House Member`: This is an inner class of `HouseMemberSet`. It contains the details of a single house member, such as their name and role in the household.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n","description":"\nuserId is an input of type String and pageable is an input of type Pageable. The method listAllHousemates would be used to list all members of all houses of user with the provided userId."},"name":"listAllHousemates","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"cecf4294-245e-bfaf-5049-48aa469c1142","ancestors":["19675247-7e95-01b2-b044-37375ebb4bfa"],"type":"function","description":"verifies if an email address is confirmed for a user by querying the user service. If the email address is confirmed, it returns an `OK` response entity, otherwise it returns a `BAD_REQUEST` response entity.","params":[{"name":"userId","type_name":"String","description":"unique identifier of the user whose email is being confirmed.\n\n* `userId`: A string representing the user ID for whom email confirmation is being performed.","complex_type":true},{"name":"emailConfirmToken","type_name":"String","description":"12-digit token generated by the email confirmation service to verify the user's email address.\n\n* `userId`: A string representing the user ID.\n* `emailConfirmToken`: A token generated by the server to confirm the email address of a user.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `ok` or `badRequest`, depending on whether the email confirmation was successful or not.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response message in a web service. It has an `ok` method that returns a `ResponseEntity` object with a status code of 200 and a `badRequest` method that returns a `ResponseEntity` object with a status code of 400.\n* `Void`: This is the type of the entity in the `ResponseEntity` object. It represents the absence of an entity, which means that the function does not return any data.\n\nThe `confirmEmail` function returns a `ResponseEntity` object with a status code of 200 if the email confirmation was successful, or a status code of 400 if there was an error. The function does not provide any additional information about the result beyond the status code.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n","description":"\nThis code is an implementation of a method that would be used to confirm the email address of a user. The method takes two string inputs: one for the user's ID and another for the token used to confirm their email.\nThe first line of this code, which reads "},"name":"confirmEmail","code":"@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":126,"insert":126,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"66a2e00c-28b9-7ebb-6640-2e570c5cb736","ancestors":["19675247-7e95-01b2-b044-37375ebb4bfa"],"type":"function","description":"resends an email confirmation to a user if one was previously sent and failed, or returns a bad request if no email confirmation was sent.","params":[{"name":"userId","type_name":"String","description":"ID of the user whose email confirmation should be resent.\n\n* `userService`: An instance of `UserService`, which is likely to be an abstract class or interface that provides methods for managing users in the application.\n* `resendEmailConfirm`: A boolean value indicating whether the email confirmation was resent successfully or not.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"an `OkResponseEntity` indicating successful resending of the email confirmation to the user.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a RESTful API request.\n* `ok`: The status code of the response is set to `OK`, indicating that the email confirmation was successfully resent.\n* `build`: The response entity is built with the specified properties.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if (emailConfirmResend) {\n        return ResponseEntity.ok().build();\n    } else {\n        return ResponseEntity.badRequest().build();\n    }\n}\n","description":""},"name":"resendConfirmEmailMail","code":"@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2},"item_type":"method","length":9}]}}}
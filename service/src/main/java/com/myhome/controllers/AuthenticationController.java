package com.myhome.controllers;

import com.myhome.api.AuthenticationApi;
import com.myhome.domain.AuthenticationData;
import com.myhome.model.LoginRequest;
import com.myhome.services.AuthenticationService;
import javax.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

/**
 * TODO
 */
@RequiredArgsConstructor
@RestController
public class AuthenticationController implements AuthenticationApi {

  private final AuthenticationService authenticationService;

  /**
   * handles login requests by logging in the user and returning an `OK` response with
   * headers containing authentication data.
   * 
   * @param loginRequest логин request sent by the user, containing the necessary
   * information for authentication.
   * 
   * 	- `@Valid`: This annotation indicates that the `loginRequest` object must be
   * validated using the `@Validation` annotation.
   * 	- `AuthenticationData`: This represents the data required for authentication,
   * which is generated by the `authenticationService` method `login`.
   * 
   * @returns a `ResponseEntity` object containing an `OK` status and headers generated
   * based on the authentication data.
   * 
   * 	- `ResponseEntity`: This is an instance of the `ResponseEntity` class, which
   * represents a response to a RESTful API request.
   * 	- `ok()`: This method returns a `ResponseEntity` with a status code of 200 (OK),
   * indicating that the login request was successful.
   * 	- `headers(createLoginHeaders(authenticationData))`: This method sets the headers
   * of the response, which contain information about the authentication data. The
   * `createLoginHeaders` method is responsible for creating these headers.
   */
  @Override
  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {
    final AuthenticationData authenticationData = authenticationService.login(loginRequest);
    return ResponseEntity.ok()
        .headers(createLoginHeaders(authenticationData))
        .build();
  }

  /**
   * creates an HTTP headers object containing user ID and JWT token for login purposes
   * based on input `AuthenticationData`.
   * 
   * @param authenticationData data required for logging into an application, providing
   * the user ID and JWT token for authentication.
   * 
   * 1/ `getUserId()` - Retrieves the user ID from the authentication data.
   * 2/ `getJwtToken()` - Retrieves the JWT token from the authentication data.
   * 
   * @returns a set of HTTP headers containing the user ID and JWT token for authentication
   * purposes.
   * 
   * 	- `HttpHeaders`: This is an instance of the `HttpHeaders` class from the Java
   * `java.net` package, which represents a set of HTTP headers.
   * 	- `add()` methods: These methods are used to add new header elements to the
   * `HttpHeaders` object. In this function, two such methods are called - `add("userId")`
   * and `add("token")`. The values of these method calls are `authenticationData.getUserId()`
   * and `authenticationData.getJwtToken()`, respectively.
   * 	- `get()` method: This method is used to retrieve the value of a specific header
   * element. In this function, no such method call is made.
   */
  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {
    final HttpHeaders httpHeaders = new HttpHeaders();
    httpHeaders.add("userId", authenticationData.getUserId());
    httpHeaders.add("token", authenticationData.getJwtToken());
    return httpHeaders;
  }
}
